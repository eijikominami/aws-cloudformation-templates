AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: AWSCloudFormationTemplates/web-servers creates an Elastic Load Balancer and EC2 instances for Web Servers.

Metadata: 
  AWS::CloudFormation::Interface:
    ParameterGroups: 
      - Label: 
          default: 'Log Analysis Configuration'
        Parameters: 
          - AccountIdForAnalysis
          - BucketNameForAnalysis
          - LogGroupNameTransferredToS3
      - Label: 
          default: 'AutoScaling Configuration'
        Parameters: 
          - AutoScalingDesiredCapacity
          - AutoScalingMaxSize
          - AutoScalingLoadBalancerType
          - EC2ImageId
          - EC2InstanceType
          - EC2KeyName
          - EC2VolumeSize
      - Label: 
          default: 'Distribution Configuration'
        Parameters: 
          - CloudFrontDefaultTTL
          - CloudFrontMinimumTTL
          - CloudFrontMaximumTTL
          - CloudFrontViewerProtocolPolicy
          - CloudFrontDefaultRootObject
          - CloudFrontAdditionalName
          - CloudFrontSecondaryOriginId
          - CloudFrontRestrictViewerAccess
          - CloudFront403ErrorResponsePagePath
          - CloudFront404ErrorResponsePagePath
          - CloudFront500ErrorResponsePagePath
          - DomainName
          - GlobalInfrastructure
          - Logging
      - Label: 
          default: 'AvailabilityZone Configuration'
        Parameters: 
          - SubnetPublicCidrBlockForAz1
          - SubnetTransitCidrBlockAz1
          - SubnetPublicCidrBlockForAz2
          - SubnetTransitCidrBlockAz2
          - VPCCidrBlock     
      - Label:
          default: 'Transit Gateway Configuration'
        Parameters:
          - TransitGatewayId
          - TransitGatewayDestinationCidrBlock    
      - Label: 
          default: 'Data Lifecycle Manager Configuration'
        Parameters: 
          - EC2DailySnapshotScheduledAt
      - Label: 
          default: 'Domain Configuration'
        Parameters: 
          - ACMValidationMethod
          - ACMDomainName
          - CertificateManagerARN
          - DomainName
          - Route53HostedZoneId
      - Label: 
          default: 'WAF Configuration'
        Parameters: 
          - WebACL
          - WebACLArnForCloudFront
      - Label: 
          default: 'Notification Configuration'
        Parameters: 
          - SNSForAlertArn
          - SNSForDeploymentArn
      - Label: 
          default: 'Tag Configuration'
        Parameters:
          - Environment 
          - TagKey
          - TagValue

Parameters:
  AccountIdForAnalysis:
    Type: String
    Default: ''
    Description: The AWS account id for log analysis
  ACMValidationMethod:
    Type: String
    Default: DNS
    AllowedValues:
      - DNS
      - EMAIL
    Description: The validation method that you own or control the domain [conditional]
  ACMDomainName:
    Type: String
    Default: ''
    Description: The domain name created by Certification Manager
  BucketNameForAnalysis:
    Type: String
    Default: ''
    Description: The Amazon S3 bucket name for log analysis
  CertificateManagerARN:
    Default: ''
    Type: String
    Description: The ARN of an SSL Certifiation attached to CloudFront
  AutoScalingDesiredCapacity:
    Type: Number
    Default: 1
    MinValue: 0
    Description: AutoScaling Desired Capacity [required]
  AutoScalingMaxSize:
    Type: Number
    Default: 1
    MinValue: 0
    Description: AutoScaling Max Size [required]
  AutoScalingLoadBalancerType:
    Type: String
    Default: None
    AllowedValues:
      - None
      - application
      - network  
    Description: The autoScaling LoadBalancer Type [required]
  CloudFrontDefaultTTL:
    Default: 86400
    MinValue: 0
    Type: Number
    Description: CloudFront Default TTL [required]
  CloudFrontMinimumTTL:
    Default: 0
    MinValue: 0
    Type: Number
    Description: CloudFront Minimum TTL [required]
  CloudFrontMaximumTTL:
    Default: 31536000
    MinValue: 0
    Type: Number
    Description: CloudFront Maximum TTL [required]
  CloudFrontViewerProtocolPolicy:
    Type: String
    Default: redirect-to-https
    AllowedValues:
      - allow-all
      - redirect-to-https
      - https-only
    Description: CloudFront Viewer Protocol Policy [required]
  CloudFrontDefaultRootObject:
    Type: String
    Default: index.html
    AllowedPattern: .+
    Description: CloudFront Viewer Protocol Policy [required]
  CloudFrontAdditionalName:
    Type: String
    Default: ''
    Description: The CNAME attached to CloudFront
  CloudFrontSecondaryOriginId:
    Type: String
    Default: ''
    Description: The S3 bucket name for Secondary Origin
  CloudFrontRestrictViewerAccess:
    Type: String
    Default: DISABLED
    AllowedValues:
      - ENABLED
      - DISABLED
    Description: Enable or disable Restrict Viewer Access [required]  
  CloudFront403ErrorResponsePagePath:
    Type: String
    Default: ''
    Description: The path to the 403 custom error page
  CloudFront404ErrorResponsePagePath:
    Type: String
    Default: ''
    Description: The path to the 404 custom error page
  CloudFront500ErrorResponsePagePath:
    Type: String
    Default: ''
    Description: The path to the 500 custom error page
  DomainName:
    Type: String
    Default: ''
    Description: The CNAME attached to Elastic Load Balancer
  EC2DailySnapshotScheduledAt:
    Type: String
    Default: '17:00'  
    Description: Daily Snapshot time (HH:MM)
  EC2ImageId:
    Type: AWS::EC2::Image::Id
    Default: ami-08a8688fb7eacb171
    AllowedPattern: ^ami-.+$
    Description: The EC2 Image Id [required]
  EC2InstanceType:
    Type: String
    Default: t3.micro
    Description: The EC2 Instance Type [required]
  EC2KeyName:
    Type: String
    Default: ''
    Description: The name of an existing EC2 KeyPair to enable SSH access to the instance
  EC2VolumeSize:
    Type: Number
    Default: 8
    MinValue: 8
    Description: EC2 Volume Size [required]
  GlobalInfrastructure:
    Type: String
    Default: NONE
    AllowedValues:
      - NONE
      - CLOUDFRONT
      - GLOBAL_ACCELERATOR
    Description: Enable or disable CloudFront, Global Accelerator [required] 
  Logging:
    Type: String
    Default: ENABLED
    AllowedValues:
      - ENABLED
      - DISABLED
    Description: Enable or disable logging [required]
  LogGroupNameTransferredToS3:
    Type: String
    Default: ''
    Description: The log group name transfferd to an S3 bucket.
  Route53HostedZoneId:
    Type: String
    Default: ''
    Description: Route53 hosted zone id
  SubnetPublicCidrBlockForAz1:
    Type: String
    Default: 10.1.0.0/24
    AllowedPattern: ^[0-9./]*$
    Description: The public subnet CIDR block at AZ1 [required]
  SubnetTransitCidrBlockAz1:
    Type: String
    Default: 10.1.3.0/24
    AllowedPattern: ^[0-9./]*$
    Description: The transit subnet CIDR block
  SubnetPublicCidrBlockForAz2:
    Type: String
    Default: 10.1.4.0/24
    AllowedPattern: ^[0-9./]*$
    Description: The public subnet CIDR block at AZ2 [required]
  SubnetTransitCidrBlockAz2:
    Type: String
    Default: 10.1.7.0/24
    AllowedPattern: ^[0-9./]*$
    Description: The transit subnet CIDR block
  TransitGatewayId:
    Type: String
    Default: ''
    Description: The ID of a transit gateway
  TransitGatewayDestinationCidrBlock:
    Type: String
    Default: ''
    Description: The IPv4 CIDR block forward to TransitGateway
  VPCCidrBlock:
    Type: String
    Default: 10.1.0.0/21
    AllowedPattern: ^[0-9./]*$
    Description: The VPC CIDR block [required]
  WebACL:
    Type: String
    Default: DISABLED
    AllowedValues:
      - ENABLED
      - DISABLED
    Description: Enable or disable WebACL [required]
  WebACLArnForCloudFront:
    Type: String
    Default: '' 
    Description: Web ACL ARN for CloudFront
  SNSForAlertArn:
    Type: String
    Default: ''   
  SNSForDeploymentArn:
    Type: String
    Default: ''
  Environment:
    Type: String
    Default: production
    AllowedValues:
      - production
      - test
      - development
  TagKey:
    Type: String
    Default: createdby
    AllowedPattern: .+
  TagValue:
    Type: String
    Default: aws-cloudformation-templates
    AllowedPattern: .+

Conditions:
  AutoScalingEnabled: !Not [ !Equals [ !Ref AutoScalingLoadBalancerType, None ] ] 
  AutoScalingDisabled: !Equals [ !Ref AutoScalingLoadBalancerType, None ]
  KeyExists: !Not [ !Equals [ !Ref EC2KeyName, '' ] ]
  CreateCloudFront: !Equals [ !Ref GlobalInfrastructure, CLOUDFRONT ]
  CreateDataLifecycleManager: !Not [ !Equals [ !Ref EC2DailySnapshotScheduledAt, '' ] ]
  CreateGlobalAccelerator: !Equals [ !Ref GlobalInfrastructure, GLOBAL_ACCELERATOR ]
  CreateNetworkLoadBalancer: !Equals [ !Ref AutoScalingLoadBalancerType, network ] 
  CreateRoute53: !And [ !Equals [ !Ref GlobalInfrastructure, CLOUDFRONT ], !Equals [ !Ref AutoScalingLoadBalancerType, None ], !Not [ !Equals [ !Ref Route53HostedZoneId, ''] ], !Not [ !Equals [ !Ref DomainName, ''] ] ]
  CreateS3ReplicationForAnalysis: !And [ !Not [ !Equals [ !Ref AccountIdForAnalysis, ''] ], !Not [ !Equals [ !Ref BucketNameForAnalysis, ''] ]]
  CreateSNSForAlert: !Equals [ !Ref SNSForAlertArn, '']
  CreateSNSForDeployment: !Equals [ !Ref SNSForDeploymentArn, '']
  CreateTransitGateway: !And [ !Not [ !Equals [ !Ref TransitGatewayId, '' ] ], !Not [ !Equals [ !Ref TransitGatewayDestinationCidrBlock, '' ] ] ]
  CreateWAFForCloudFront: !And [!Equals [ !Ref GlobalInfrastructure, CLOUDFRONT ], !Equals [ !Ref WebACL, ENABLED ] ]
  CreateWAFForALB: !And [!Equals [ !Ref GlobalInfrastructure, CLOUDFRONT ], !Equals [ !Ref AutoScalingLoadBalancerType, application ], !Equals [ !Ref WebACL, ENABLED ] ]
  CreateKinesisFirehose: !Not [ !Equals [ !Ref LogGroupNameTransferredToS3, '' ] ]
  Development: !Equals [ !Ref Environment, development]

Resources:
  # Nested Stack
  Az1:
    DependsOn:
      # NATGateway requires provisioned Internet Gateway.
      - InternetGatewayAttachment
    Type: AWS::Serverless::Application
    Properties:
      NotificationARNs:
        - !If
          - CreateSNSForDeployment
          - !GetAtt SNSForDeployment.Outputs.SNSTopicArn
          - !Ref SNSForDeploymentArn
      Parameters:
        AvailabilityZone: !Select 
          - 0
          - Fn::GetAZs: !Ref 'AWS::Region'
        InternetGatewayId: !Ref InternetGateway
        NetworkLoadBalancer: !If 
         - CreateNetworkLoadBalancer
         - ENABLED
         - DISABLED
        LogicalNamePrefix: !Ref AWS::StackName
        SubnetPublicCidrBlock: !Ref SubnetPublicCidrBlockForAz1
        SubnetTransitCidrBlock: !Ref SubnetTransitCidrBlockAz1
        SNSForAlertArn: !If
          - CreateSNSForAlert
          - !GetAtt SNSForAlert.Outputs.SNSTopicArn
          - !Ref SNSForAlertArn
        SNSForDeploymentArn: !If
          - CreateSNSForDeployment
          - !GetAtt SNSForDeployment.Outputs.SNSTopicArn
          - !Ref SNSForDeploymentArn   
        TransitGatewayId: !Ref TransitGatewayId
        TransitGatewayDestinationCidrBlock: !Ref TransitGatewayDestinationCidrBlock
        VPCId: !Ref VPC
        Environment: !Ref Environment
        TagKey: !Ref TagKey
        TagValue: !Ref TagValue
      Tags:
        environment: !Ref Environment
        createdby: !Ref TagValue
      Location:
        ApplicationId: arn:aws:serverlessrepo:us-east-1:172664222583:applications/availability-zone
        SemanticVersion: 2.0.46
  Az2:
    DependsOn:
      # NATGateway requires provisioned Internet Gateway.
      - InternetGatewayAttachment
    Type: AWS::Serverless::Application
    Properties:
      NotificationARNs:
        - !If
          - CreateSNSForDeployment
          - !GetAtt SNSForDeployment.Outputs.SNSTopicArn
          - !Ref SNSForDeploymentArn
      Parameters:
        AvailabilityZone: !Select
          - 1
          - Fn::GetAZs: !Ref 'AWS::Region'
        InternetGatewayId: !Ref InternetGateway
        NetworkLoadBalancer: !If 
         - CreateNetworkLoadBalancer
         - ENABLED
         - DISABLED
        LogicalNamePrefix: !Ref AWS::StackName
        SubnetPublicCidrBlock: !Ref SubnetPublicCidrBlockForAz2
        SubnetTransitCidrBlock: !Ref SubnetTransitCidrBlockAz2
        SNSForAlertArn: !If
          - CreateSNSForAlert
          - !GetAtt SNSForAlert.Outputs.SNSTopicArn
          - !Ref SNSForAlertArn
        SNSForDeploymentArn: !If
          - CreateSNSForDeployment
          - !GetAtt SNSForDeployment.Outputs.SNSTopicArn
          - !Ref SNSForDeploymentArn 
        TransitGatewayId: !Ref TransitGatewayId
        TransitGatewayDestinationCidrBlock: !Ref TransitGatewayDestinationCidrBlock
        VPCId: !Ref VPC
        Environment: !Ref Environment
        TagKey: !Ref TagKey
        TagValue: !Ref TagValue 
      Tags:
        environment: !Ref Environment
        createdby: !Ref TagValue
      Location:
        ApplicationId: arn:aws:serverlessrepo:us-east-1:172664222583:applications/availability-zone
        SemanticVersion: 2.0.46
  AutoScaling:
    Condition: AutoScalingEnabled
    Type: AWS::CloudFormation::Stack
    Properties:
      NotificationARNs:
        - !If
          - CreateSNSForDeployment
          - !GetAtt SNSForDeployment.Outputs.SNSTopicArn
          - !Ref SNSForDeploymentArn
      Parameters:
        ACMValidationMethod: !Ref ACMValidationMethod
        ACMDomainName: !Ref ACMDomainName
        AutoScalingDesiredCapacity: !Ref AutoScalingDesiredCapacity
        AutoScalingMaxSize: !Ref AutoScalingMaxSize
        DomainName: !If
          - CreateCloudFront
          - !Sub origin-${DomainName}
          - !Ref DomainName
        EC2ImageId: !Ref EC2ImageId
        EC2InstanceType: !Ref EC2InstanceType
        EC2IamInstanceProfileArn: !GetAtt IamInstanceProfileForIAMRoleForEC2.Arn
        EC2KeyName: !Ref EC2KeyName
        EC2SecurityGroupId: !Ref SecurityGroupWeb
        EC2VolumeSize: !Ref EC2VolumeSize
        EipAllocationId1ForNLB: !If 
          - CreateNetworkLoadBalancer
          - !GetAtt Az1.Outputs.NetworkLoadBalancerIPAllocationId
          - ''
        EipAllocationId2ForNLB: !If 
          - CreateNetworkLoadBalancer
          - !GetAtt Az2.Outputs.NetworkLoadBalancerIPAllocationId
          - ''
        LoadBalancerType: !Ref AutoScalingLoadBalancerType
        LogicalNamePrefix: !Ref AWS::StackName
        Route53HostedZoneId: !Ref Route53HostedZoneId
        SubnetId1ForELB: !GetAtt Az1.Outputs.PublicSubnetId
        SubnetId2ForELB: !GetAtt Az2.Outputs.PublicSubnetId
        SNSForAlertArn: !If
          - CreateSNSForAlert
          - !GetAtt SNSForAlert.Outputs.SNSTopicArn
          - !Ref SNSForAlertArn
        SNSForDeploymentArn: !If
          - CreateSNSForDeployment
          - !GetAtt SNSForDeployment.Outputs.SNSTopicArn
          - !Ref SNSForDeploymentArn 
        VPCId: !Ref VPC
        Environment: !Ref Environment
        TagKey: !Ref TagKey
        TagValue: !Ref TagValue 
      Tags:
        - Key: environment
          Value: !Ref Environment
        - Key: !Ref TagKey
          Value: !Ref TagValue
      TemplateURL: !If
        - Development
        - https://s3.amazonaws.com/eijikominami-test/aws-cloudformation-templates/web-servers/autoscaling.yaml
        - https://s3.amazonaws.com/eijikominami/aws-cloudformation-templates/web-servers/autoscaling.yaml
  DataLifecycleManager:
    Condition: CreateDataLifecycleManager
    Type: AWS::CloudFormation::Stack
    Properties:
      NotificationARNs:
        - !If
          - CreateSNSForDeployment
          - !GetAtt SNSForDeployment.Outputs.SNSTopicArn
          - !Ref SNSForDeploymentArn
      Parameters:
        DailySnapshotScheduledAt: !Ref EC2DailySnapshotScheduledAt
        LogicalNamePrefix: !Ref AWS::StackName
        Environment: !Ref Environment
        TagKey: !Ref TagKey
        TagValue: !Ref TagValue 
      Tags:
        - Key: environment
          Value: !Ref Environment
        - Key: !Ref TagKey
          Value: !Ref TagValue
      TemplateURL: !If
        - Development
        - https://s3.amazonaws.com/eijikominami-test/aws-cloudformation-templates/web-servers/dlm.yaml
        - https://s3.amazonaws.com/eijikominami/aws-cloudformation-templates/web-servers/dlm.yaml
  WAF:
    Condition: CreateWAFForALB
    Type: AWS::CloudFormation::Stack
    Properties:
      NotificationARNs:
        - !If
          - CreateSNSForDeployment
          - !GetAtt SNSForDeployment.Outputs.SNSTopicArn
          - !Ref SNSForDeploymentArn
      Parameters:
        LogicalNamePrefix: !Ref AWS::StackName
        TargetResourceArn: !GetAtt AutoScaling.Outputs.LoadBalancerArn
        Environment: !Ref Environment
        TagKey: !Ref TagKey
        TagValue: !Ref TagValue
      Tags:
        - Key: environment
          Value: !Ref Environment
        - Key: !Ref TagKey
          Value: !Ref TagValue
      TemplateURL: !If
        - Development
        - https://s3.amazonaws.com/eijikominami-test/aws-cloudformation-templates/edge/waf.yaml
        - https://s3.amazonaws.com/eijikominami/aws-cloudformation-templates/edge/waf.yaml
  CloudFront:
    Condition: CreateCloudFront
    Type: AWS::CloudFormation::Stack
    Properties:
      NotificationARNs:
        - !If
          - CreateSNSForDeployment
          - !GetAtt SNSForDeployment.Outputs.SNSTopicArn
          - !Ref SNSForDeploymentArn
      Parameters:
        CertificateManagerARN: !Ref CertificateManagerARN
        DomainName: !Ref DomainName
        CloudFrontDefaultTTL: !Ref CloudFrontDefaultTTL
        CloudFrontMinimumTTL: !Ref CloudFrontMinimumTTL
        CloudFrontMaximumTTL: !Ref CloudFrontMaximumTTL
        CloudFrontViewerProtocolPolicy: !Ref CloudFrontViewerProtocolPolicy
        CloudFrontDefaultRootObject: !Ref CloudFrontDefaultRootObject
        CloudFrontAdditionalName: !Ref CloudFrontAdditionalName
        CloudFrontSecondaryOriginId: !Ref CloudFrontSecondaryOriginId
        CloudFrontRestrictViewerAccess: !Ref CloudFrontRestrictViewerAccess
        CloudFront403ErrorResponsePagePath: !Ref CloudFront403ErrorResponsePagePath
        CloudFront404ErrorResponsePagePath: !Ref CloudFront404ErrorResponsePagePath
        CloudFront500ErrorResponsePagePath: !Ref CloudFront500ErrorResponsePagePath
        CloudFrontOriginDomainName: !If
          - AutoScalingEnabled
          - !Sub origin-${DomainName}
          - !Ref EIPForEC2Instance
        CloudFrontOriginType: NOT_S3
        Route53HostedZoneId: !Ref Route53HostedZoneId
        Logging: !Ref Logging
        LogBucketName: !Ref S3ForAccessLog
        WebACLArn: !If
          - CreateWAFForCloudFront
          - !Ref WebACLArnForCloudFront
          - ''
        SNSForAlertArn: !Ref SNSForAlertArn
        SNSForDeploymentArn: !Ref SNSForDeploymentArn
        Environment: !Ref Environment
        TagKey: !Ref TagKey
        TagValue: !Ref TagValue
      Tags:
        - Key: environment
          Value: !Ref Environment
        - Key: !Ref TagKey
          Value: !Ref TagValue
      TemplateURL: !If
        - Development
        - https://s3.amazonaws.com/eijikominami-test/aws-cloudformation-templates/edge/cloudfront.yaml
        - https://s3.amazonaws.com/eijikominami/aws-cloudformation-templates/edge/cloudfront.yaml
  GlobalAccelerator:
    Condition: CreateGlobalAccelerator
    Type: AWS::CloudFormation::Stack
    Properties:
      NotificationARNs:
        - !If
          - CreateSNSForDeployment
          - !GetAtt SNSForDeployment.Outputs.SNSTopicArn
          - !Ref SNSForDeploymentArn
      Parameters:
        EndpointId: !If
          - AutoScalingEnabled
          - !GetAtt AutoScaling.Outputs.LoadBalancerArn
          - !Ref EIPForEC2Instance
        EndpointGroupRegion: !Ref AWS::Region
        HealthCheckPath: /
        HealthCheckPort: 80
        HealthCheckProtocol: HTTP
        Name: !Ref AWS::StackName
      Tags:
        - Key: environment
          Value: !Ref Environment
        - Key: !Ref TagKey
          Value: !Ref TagValue
      TemplateURL: !If
        - Development
        - https://s3.amazonaws.com/eijikominami-test/aws-cloudformation-templates/network/globalaccelerator.yaml
        - https://s3.amazonaws.com/eijikominami/aws-cloudformation-templates/edge/network/globalaccelerator.yaml
  Route53Resolver:
    Condition: CreateTransitGateway
    Type: AWS::CloudFormation::Stack
    Properties:
      NotificationARNs:
        - !If
          - CreateSNSForDeployment
          - !GetAtt SNSForDeployment.Outputs.SNSTopicArn
          - !Ref SNSForDeploymentArn
      Parameters:
        SecurityGroupId: !Ref SecurityGroupWeb
        SubnetId1: !GetAtt Az1.Outputs.PublicSubnetId
        SubnetId2: !GetAtt Az2.Outputs.PublicSubnetId
        Environment: !Ref Environment
        TagKey: !Ref TagKey
        TagValue: !Ref TagKey
      Tags:
        - Key: environment
          Value: !Ref Environment
        - Key: !Ref TagKey
          Value: !Ref TagValue
      TemplateURL: !If
        - Development
        - https://s3.amazonaws.com/eijikominami-test/aws-cloudformation-templates/network/route53.yaml
        - https://s3.amazonaws.com/eijikominami/aws-cloudformation-templates/network/route53.yaml
  SNSForAlert:
    Condition: CreateSNSForAlert
    Type: AWS::Serverless::Application
    Properties:
      Location:
        ApplicationId: arn:aws:serverlessrepo:us-east-1:172664222583:applications/sns-topic
        SemanticVersion: 2.0.46
      NotificationARNs:
        - !If
          - CreateSNSForDeployment
          - !GetAtt SNSForDeployment.Outputs.SNSTopicArn
          - !Ref SNSForDeploymentArn
      Parameters:
        TopicName: !Sub Alert-createdby-${AWS::StackName}
      Tags:
        environment: !Ref Environment
        createdby: !Ref TagValue
  SNSForDeployment:
    Condition: CreateSNSForDeployment
    Type: AWS::Serverless::Application
    Properties:
      Location:
        ApplicationId: arn:aws:serverlessrepo:us-east-1:172664222583:applications/sns-topic
        SemanticVersion: 2.0.46
      Parameters:
        TopicName: !Sub Deployment-createdby-${AWS::StackName}
      Tags:
        environment: !Ref Environment
        createdby: !Ref TagValue
  # IAM
  IAMRoleForEC2:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      Description: A role required for Managed Instances.
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonSSMMaintenanceWindowRole
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
      RoleName: !Sub '${AWS::StackName}-AWSEC2Role-${AWS::Region}'
      Tags:
        - Key: environment
          Value: !Ref Environment
        - Key: !Ref TagKey
          Value: !Ref TagValue
  IAMRoleForVPCFlowLog:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: vpc-flow-logs.amazonaws.com
            Action: sts:AssumeRole
      Description: A role required for VPC FlowLog.
      Policies:
        - PolicyName: CloudWatchLogs
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:DescribeLogGroups
                  - logs:DescribeLogStreams
                Resource: '*'
      RoleName: !Sub ${AWS::StackName}-AWSVPCFlowLogRole-${AWS::Region}
      Tags:
        - Key: environment
          Value: !Ref Environment
        - Key: !Ref TagKey
          Value: !Ref TagValue
  IAMRoleForFirehose:
    Condition: CreateKinesisFirehose
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: firehose.amazonaws.com
            Action: sts:AssumeRole
      Description: A role required for Kinesis Firehose.
      Policies:
        - PolicyName: S3
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:AbortMultipartUpload
                  - s3:GetBucketLocation
                  - s3:GetObject
                  - s3:ListBucket
                  - s3:ListBucketMultipartUploads
                  - s3:PutObject
                Resource: '*'
      RoleName: !Sub ${AWS::StackName}-Firehose-${AWS::Region}
      Tags:
        - Key: environment
          Value: !Ref Environment
        - Key: !Ref TagKey
          Value: !Ref TagValue
  IAMRoleForCloudWatchLogs:
    Condition: CreateKinesisFirehose
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: !Sub logs.${AWS::Region}.amazonaws.com
            Action: sts:AssumeRole
      Description: A role required for CloudWatch Logs.
      Policies:
        - PolicyName: Firehose
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - firehose:PutRecord
                  - firehose:PutRecords
                Resource: '*'
      RoleName: !Sub ${AWS::StackName}-CloudWatchLogs-${AWS::Region}
      Tags:
        - Key: environment
          Value: !Ref Environment
        - Key: !Ref TagKey
          Value: !Ref TagValue
  IAMRoleForS3Replication:
    Condition: CreateS3ReplicationForAnalysis
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: s3.amazonaws.com
            Action: sts:AssumeRole
            Condition:
              StringEquals:
                aws:SourceArn: !Sub 'arn:aws:s3:::${S3ForAccessLog}'
      Description: A role required for S3 to access another S3 bucket for analysis.
      Policies:
        - PolicyName: S3Replication
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetReplicationConfiguration
                  - s3:ListBucket
                Resource:
                  - !Sub 'arn:aws:s3:::${S3ForAccessLog}'
              - Effect: Allow
                Action:
                  - s3:GetObjectVersionForReplication
                  - s3:GetObjectVersionAcl
                  - s3:GetObjectVersionTagging
                Resource:
                  - !Sub 'arn:aws:s3:::${S3ForAccessLog}/*'
              - Effect: Allow
                Action:
                  - s3:ReplicateObject
                  - s3:ReplicateDelete
                  - s3:ReplicateTags
                  - s3:ObjectOwnerOverrideToBucketOwner
                Resource:
                  - !Sub 'arn:aws:s3:::${BucketNameForAnalysis}/*'
      RoleName: !Sub ${AWS::StackName}-S3-Replication-${AWS::Region}
      Tags:
        - Key: environment
          Value: !Ref Environment
        - Key: !Ref TagKey
          Value: !Ref TagValue  
  # InstanceProfile
  IamInstanceProfileForIAMRoleForEC2:
    Type: AWS::IAM::InstanceProfile
    Properties: 
      InstanceProfileName: !Ref IAMRoleForEC2
      Roles: 
        - !Ref IAMRoleForEC2
  # VPC
  VPC:
    Type: AWS::EC2::VPC
    Properties: 
      CidrBlock: !Ref VPCCidrBlock
      Tags:
        - Key: Name
          Value: !Sub vpc-${AWS::StackName}-${AWS::Region}
        - Key: environment
          Value: !Ref Environment
        - Key: !Ref TagKey
          Value: !Ref TagValue
  # Peering connections with Transit Gateway and VPC for outbound traffic
  TransitGatewayAttachment:
    Condition: CreateTransitGateway
    Type: AWS::EC2::TransitGatewayAttachment
    Properties: 
      SubnetIds:
        - !GetAtt Az1.Outputs.TransitSubnetId
        - !GetAtt Az2.Outputs.TransitSubnetId
      Tags:
        - Key: Name
          Value: !Sub tgw-attach-${AWS::StackName}-${AWS::Region}
        - Key: environment
          Value: !Ref Environment
        - Key: !Ref TagKey
          Value: !Ref TagValue
      TransitGatewayId: !Ref TransitGatewayId
      VpcId: !Ref VPC
  TransitGatewayRouteTable:
    Condition: CreateTransitGateway
    Type: AWS::EC2::TransitGatewayRouteTable
    Properties: 
      Tags: 
        - Key: Name
          Value: !Sub tgw-rtb-${AWS::StackName}-${AWS::Region}
        - Key: environment
          Value: !Ref Environment
        - Key: !Ref TagKey
          Value: !Ref TagValue
      TransitGatewayId: !Ref TransitGatewayId
  TransitGatewayRouteTableAssociation:
    Condition: CreateTransitGateway
    Type: AWS::EC2::TransitGatewayRouteTableAssociation
    Properties: 
      TransitGatewayAttachmentId: !Ref TransitGatewayAttachment
      TransitGatewayRouteTableId: !Ref TransitGatewayRouteTable
  TransitGatewayRouteTablePropagation:
    Condition: CreateTransitGateway
    Type: AWS::EC2::TransitGatewayRouteTablePropagation
    Properties: 
      TransitGatewayAttachmentId: !Ref TransitGatewayAttachment
      TransitGatewayRouteTableId: !Ref TransitGatewayRouteTable
  RouteTransitToTransitGatewayAz1:
    Condition: CreateTransitGateway
    DependsOn:
      - TransitGatewayRouteTableAssociation
      - TransitGatewayRouteTablePropagation
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: !Ref TransitGatewayDestinationCidrBlock
      TransitGatewayId: !Ref TransitGatewayId
      RouteTableId: !GetAtt Az1.Outputs.RouteTableIdTransit
  RouteTransitToTransitGatewayAz2:
    Condition: CreateTransitGateway
    DependsOn:
      - TransitGatewayRouteTableAssociation
      - TransitGatewayRouteTablePropagation
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: !Ref TransitGatewayDestinationCidrBlock
      TransitGatewayId: !Ref TransitGatewayId
      RouteTableId: !GetAtt Az2.Outputs.RouteTableIdTransit
  # Internet GW
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties: 
      Tags:
        - Key: Name
          Value: !Sub igw-${AWS::StackName}-${AWS::Region}
        - Key: environment
          Value: !Ref Environment
        - Key: !Ref TagKey
          Value: !Ref TagValue
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties: 
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC
  # Elastic IP
  EIPForEC2Instance:
    Condition: AutoScalingDisabled
    Type: AWS::EC2::EIP
    Properties:
      Domain: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub eip-${AWS::StackName}-${AWS::Region}-ec2
        - Key: environment
          Value: !Ref Environment
        - Key: !Ref TagKey
          Value: !Ref TagValue
  EIPAssociation:
    Condition: AutoScalingDisabled
    Type: AWS::EC2::EIPAssociation
    Properties: 
      AllocationId: !GetAtt EIPForEC2Instance.AllocationId
      InstanceId: !Ref EC2
  # Route53
  Route53RecordSet:
    Condition: CreateRoute53
    Type: AWS::Route53::RecordSet
    Properties:
      Comment: !Ref DomainName
      HostedZoneId: !Ref Route53HostedZoneId
      Name: !Ref DomainName
      ResourceRecords: 
        - !Ref EIPForEC2Instance
      TTL: 600
      Type: A
  # EC2
  EC2:
    Condition: AutoScalingDisabled
    Type: AWS::EC2::Instance
    Properties:
      BlockDeviceMappings: 
        - DeviceName: /dev/sda1
          Ebs: 
            DeleteOnTermination: true
            Encrypted: true
            VolumeSize: !Ref EC2VolumeSize
            VolumeType: gp3
      EbsOptimized: true
      ImageId: !Ref EC2ImageId
      IamInstanceProfile: !Ref IamInstanceProfileForIAMRoleForEC2
      InstanceInitiatedShutdownBehavior: stop
      InstanceType: !Ref EC2InstanceType
      KeyName: !If
        - KeyExists
        - !Ref EC2KeyName
        - !Ref AWS::NoValue
      Monitoring: true
      SecurityGroupIds: 
        - !Ref SecurityGroupWeb
      SubnetId: !GetAtt Az1.Outputs.PublicSubnetId
      Tags: 
        - Key: Name
          Value: !Sub ec2-${AWS::StackName}-${AWS::Region}
        - Key: environment
          Value: !Ref Environment
        - Key: !Ref TagKey
          Value: !Ref TagValue
  # Security Group
  SecurityGroupWeb:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      # 'sg-' prefix is NOT permitted.
      GroupName: !Sub sgp-${AWS::StackName}-${AWS::Region}-web
      GroupDescription: Security Group for Web Server
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          Description: http
          FromPort: 80
          ToPort: 80
          IpProtocol: TCP
        - CidrIp: 0.0.0.0/0
          Description: https
          FromPort: 443
          ToPort: 443
          IpProtocol: TCP
        - CidrIp: 0.0.0.0/0
          Description: icmp
          FromPort: -1
          ToPort: -1
          IpProtocol: ICMP
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          FromPort: 0
          ToPort: 0
          IpProtocol: '-1'
      Tags:
        - Key: Name
          Value: !Sub sgp-${AWS::StackName}-${AWS::Region}-web
        - Key: environment
          Value: !Ref Environment
        - Key: !Ref TagKey
          Value: !Ref TagValue
      VpcId: !Ref VPC
  # VPC FlowLog
  VPCFlowLog:
    Type: AWS::EC2::FlowLog
    Properties: 
      DeliverLogsPermissionArn: !GetAtt IAMRoleForVPCFlowLog.Arn
      LogDestinationType: cloud-watch-logs
      LogGroupName: !Ref CloudWatchLogsGroupForVPCFlowLog
      ResourceId: !Ref VPC
      ResourceType: VPC
      TrafficType: ALL
      Tags: 
        - Key: environment
          Value: !Ref Environment
        - Key: !Ref TagKey
          Value: !Ref TagValue
  CloudWatchLogsGroupForVPCFlowLog:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/vpc/${AWS::StackName}'
      RetentionInDays: 60
      Tags: 
        - Key: environment
          Value: !Ref Environment
        - Key: !Ref TagKey
          Value: !Ref TagValue
  CloudWatchAlarmEC2:
    Type: AWS::Serverless::Application
    Properties:
      Parameters:
        CustomAlarmName: !Ref AWS::StackName
        SNSTopicArn: !If 
          - CreateSNSForAlert
          - !GetAtt SNSForAlert.Outputs.SNSTopicArn
          - !Ref SNSForAlertArn
        CPUUtilizationThreshold: 70
      NotificationARNs: 
        - !If
          - CreateSNSForDeployment
          - !GetAtt SNSForDeployment.Outputs.SNSTopicArn
          - !Ref SNSForDeploymentArn
      Location:
        ApplicationId: arn:aws:serverlessrepo:us-east-1:172664222583:applications/cloudwatch-alarm-about-ec2
        SemanticVersion: 2.0.46
      Tags:
        environment: !Ref Environment
        createdby: !Ref TagValue
  CloudWatchAlarmEC2CWAgent:
    Condition: AutoScalingDisabled
    Type: AWS::Serverless::Application
    Properties:
      Parameters:
        CustomAlarmName: !Ref AWS::StackName
        DiskUsedPercentThreshold: 90
        ImageId: !Ref EC2ImageId
        InstanceId: !Ref EC2
        InstanceType: !Ref EC2InstanceType
        MemUsedPercentThreshold: 90
        SNSTopicArn: !If 
          - CreateSNSForAlert
          - !GetAtt SNSForAlert.Outputs.SNSTopicArn
          - !Ref SNSForAlertArn
      NotificationARNs: 
        - !If
          - CreateSNSForDeployment
          - !GetAtt SNSForDeployment.Outputs.SNSTopicArn
          - !Ref SNSForDeploymentArn
      Location:
        ApplicationId: arn:aws:serverlessrepo:us-east-1:172664222583:applications/cloudwatch-alarm-about-ec2-cwagent
        SemanticVersion: 2.0.46
      Tags:
        environment: !Ref Environment
        createdby: !Ref TagValue
  S3ForAccessLog:
    Type: AWS::S3::Bucket
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
    Properties:
      AccessControl: LogDeliveryWrite
      BucketEncryption:
        ServerSideEncryptionConfiguration: 
          - ServerSideEncryptionByDefault: 
              SSEAlgorithm: AES256
      BucketName: !Join 
        - ''
        - - !Join ["-", !Split [".", !Ref DomainName]]
          - !Sub -logs-${AWS::Region}-${AWS::AccountId}
      LifecycleConfiguration:
        Rules:
          - Id: ExpirationInDays
            ExpirationInDays: 60
            Status: Enabled
          - !If 
            - CreateS3ReplicationForAnalysis
            - Id: NoncurrentVersionExpirationInDays
              NoncurrentVersionExpiration: 
                NewerNoncurrentVersions: 1
                NoncurrentDays: 1
              Status: Enabled
            - !Ref AWS::NoValue
      PublicAccessBlockConfiguration: 
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      ReplicationConfiguration: !If
        - CreateS3ReplicationForAnalysis
        - Role: !Sub arn:aws:iam::${AWS::AccountId}:role/${AWS::StackName}-S3Replication-${AWS::Region}
          Rules: 
            - Destination: 
                AccessControlTranslation:
                  Owner: Destination
                Account: !Ref AccountIdForAnalysis
                Bucket: !Sub arn:aws:s3:::${BucketNameForAnalysis}
              Id: Analysis
              Status: Enabled
        - !Ref AWS::NoValue
      VersioningConfiguration: !If 
        - CreateS3ReplicationForAnalysis
        - Status: Enabled
        - !Ref AWS::NoValue
      Tags:
        - Key: environment
          Value: !Ref Environment
        - Key: !Ref TagKey
          Value: !Ref TagValue
  S3BucketPolicyForAccessLog:
    Type: AWS::S3::BucketPolicy
    Properties: 
      Bucket: !Ref S3ForAccessLog
      PolicyDocument:
        Version: 2012-10-17
        Id: !Ref S3ForAccessLog
        Statement:
          - Effect: Deny
            Principal: '*'
            Action: 's3:*'
            Resource: 
              - !GetAtt S3ForAccessLog.Arn
              - !Join
                - ''
                - - !GetAtt S3ForAccessLog.Arn
                  - /*
            Condition:
              Bool: 
                aws:SecureTransport: false
  # CloudWatch Logs to S3
  SubscriptionFilter:
    Condition: CreateKinesisFirehose
    Type: AWS::Logs::SubscriptionFilter
    Properties: 
      DestinationArn: !GetAtt Firehose.Arn
      FilterPattern: ''
      LogGroupName: !Ref LogGroupNameTransferredToS3
      RoleArn: !GetAtt IAMRoleForCloudWatchLogs.Arn
  Firehose:
    Condition: CreateKinesisFirehose
    Type: AWS::KinesisFirehose::DeliveryStream
    Properties: 
      DeliveryStreamName: !Sub CloudWatchLogsToS3-created-by-${AWS::StackName}
      DeliveryStreamType: DirectPut
      S3DestinationConfiguration: 
        BucketARN: !GetAtt S3ForAccessLog.Arn
        BufferingHints: 
          IntervalInSeconds: 300
          SizeInMBs: 5
        Prefix: !Sub CloudWatchLogs${LogGroupNameTransferredToS3}/
        RoleARN: !GetAtt IAMRoleForFirehose.Arn
      Tags: 
        - Key: environment
          Value: !Ref Environment
        - Key: !Ref TagKey
          Value: !Ref TagValue

Outputs:
  CloudFrontURL:
    Condition: CreateCloudFront
    Description: CloudFront URL
    Value: !GetAtt CloudFront.Outputs.CloudFrontURL
  LoadBalancerDNSName:
    Condition: AutoScalingEnabled
    Description: LoadBalancer DNS Name
    Value: !GetAtt AutoScaling.Outputs.LoadBalancerDNSName
  VPCCidrBlock:
    Description: VPC CIDR Block
    Value: !GetAtt VPC.CidrBlock   
  EC2IP:
    Condition: AutoScalingDisabled
    Description: EC2 IP address
    Value: !Ref EIPForEC2Instance
  IAMRoleForS3Replication:
    Condition: CreateS3ReplicationForAnalysis
    Description: IAM Role ARN for S3 Replication 
    Value: !GetAtt IAMRoleForS3Replication.Arn 
  NatGatewayIP1:
    Description: NatGateway IP address
    Value: !GetAtt Az1.Outputs.NatGatewayIP
  NetworkLoadBalancerIP1:
    Condition: CreateNetworkLoadBalancer
    Description: NetworkLoadBalancer IP
    Value: !GetAtt Az1.Outputs.NetworkLoadBalancerIP
  NatGatewayIP2:
    Description: NatGateway IP address
    Value: !GetAtt Az2.Outputs.NatGatewayIP
  NetworkLoadBalancerIP2:
    Condition: CreateNetworkLoadBalancer
    Description: NetworkLoadBalancer IP address
    Value: !GetAtt Az2.Outputs.NetworkLoadBalancerIP
  PublicSubnetId1:
    Description: Public Subnet Id
    Value: !GetAtt Az1.Outputs.PublicSubnetId
  PublicSubnetId2:
    Description: Public Subnet Id
    Value: !GetAtt Az2.Outputs.PublicSubnetId
  TransitSubnetId1:
    Description: Public Subnet Id
    Value: !GetAtt Az1.Outputs.TransitSubnetId
  TransitSubnetId2:
    Description: Public Subnet Id
    Value: !GetAtt Az2.Outputs.TransitSubnetId
  SNSForAlertArn:
    Description: SNS ARN for Alert
    Value: !If
      - CreateSNSForAlert
      - !GetAtt SNSForAlert.Outputs.SNSTopicArn
      - !Ref SNSForAlertArn
  SNSForDeploymentArn:
    Description: SNS ARN for Deployment
    Value: !If
      - CreateSNSForDeployment
      - !GetAtt SNSForDeployment.Outputs.SNSTopicArn
      - !Ref SNSForDeploymentArn
