AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: AWSCloudFormationTemplates/web-servers/autoscaling creates Auto Scaling Group and Application Load Balancer or Network Load Balancer.

Metadata: 
  AWS::CloudFormation::Interface:
    ParameterGroups: 
      - Label: 
          default: 'AutoScaling Configuration'
        Parameters: 
          - AutoScalingDesiredCapacity
          - AutoScalingMaxSize
          - EC2ImageId
          - EC2InstanceType
          - EC2IamInstanceProfileArn
          - EC2KeyName
          - EC2SecurityGroupId
          - EC2VolumeSize
          - VPCId
      - Label: 
          default: 'Elastic Load Balancer Configuration'
        Parameters: 
          - EipAllocationId1ForNLB
          - EipAllocationId2ForNLB
          - LoadBalancerType
          - SubnetId1ForELB
          - SubnetId2ForELB
      - Label: 
          default: 'Domain Configuration'
        Parameters:
          - ACMValidationMethod
          - ACMDomainName
          - DomainName
          - Route53HostedZoneId
      - Label: 
          default: 'Notification Configuration'
        Parameters: 
          - SNSForAlertArn
          - SNSForDeploymentArn
      - Label: 
          default: 'Tag Configuration'
        Parameters:
          - LogicalNamePrefix
          - TagKey
          - TagValue

Parameters:
  ACMValidationMethod:
    Type: String
    Default: DNS
    AllowedValues:
      - DNS
      - EMAIL
    Description: The validation method that you own or control the domain [required]
  ACMDomainName:
    Type: String
    Default: ''
    Description: The domain name created by Certification Manager
  AutoScalingDesiredCapacity:
    Type: Number
    Default: 1
    MinValue: 0
    Description: AutoScaling Desired Capacity [required]
  AutoScalingMaxSize:
    Type: Number
    Default: 1
    MinValue: 0
    Description: AutoScaling Max Size [required]
  DomainName:
    Type: String
    Default: ''
    Description: The CNAME attached to Elastic Load Balancer
  EC2ImageId:
    Type: AWS::EC2::Image::Id
    Default: ami-068a6cefc24c301d2
    AllowedPattern: ^ami-.+$
    Description: The EC2 Image Id [required]
  EC2InstanceType:
    Type: String
    Default: t3.micro
    Description: The EC2 Instance Type [required]
  EC2IamInstanceProfileArn:
    Type: String
    AllowedPattern: .+
    Description: The Instance Profile ARN to attach the instances [required]
  EC2KeyName:
    Type: String
    Default: ''
    Description: The Name of an existing EC2 KeyPair to enable SSH access to the instance
  EC2SecurityGroupId:
    Type: AWS::EC2::SecurityGroup::Id
    Description: The Security Group id to attach the instances [required]
  EC2VolumeSize:
    Type: Number
    Default: 8
    MinValue: 8
    Description: EC2 Volume Size [required]
  EipAllocationId1ForNLB:     
    Type: String 
    Default: ''
    Description: The Elastic Ip Allocation Id1 for Network LoadBalancer
  EipAllocationId2ForNLB:     
    Type: String 
    Default: ''
    Description: The Elastic Ip Allocation Id2 for Network LoadBalancer
  LogicalNamePrefix:
    Type: String
    Default: WebServers
    AllowedPattern: .+
    Description: The custom prefix name [required]
  LoadBalancerType:
    Type: String
    Default: application
    AllowedValues:
      - application
      - network
    Description: The LoadBalancer Type [required]
  Route53HostedZoneId:
    Type: String
    Default: ''
    Description: Route53 hosted zone id
  SubnetId1ForELB:
    Type: String
    AllowedPattern: .+
    Description: The subnet id 1 for Network LoadBalancer
  SubnetId2ForELB:
    Type: String
    AllowedPattern: .+
    Description: The subnet id 2 for Network LoadBalancer
  SNSForAlertArn:
    Type: String
    Default: ''   
  SNSForDeploymentArn:
    Type: String
    Default: ''
  VPCId:
    Type: String
    AllowedPattern: .+
    Description: VPC Id [required]
  Environment:
    Type: String
    Default: production
    AllowedValues:
      - production
      - test
      - development
  TagKey:
    Type: String
    Default: createdby
    AllowedPattern: .+
  TagValue:
    Type: String
    Default: aws-cloudformation-templates
    AllowedPattern: .+

Conditions:
  KeyExists: !Not [ !Equals [ !Ref EC2KeyName, '' ] ]
  CreateCertificateManager: !Not [ !Equals [ !Ref ACMDomainName, ''] ]
  CreateNetworkLoadBalancer: !Equals [ !Ref LoadBalancerType, network ]
  CreateRoute53: !And [ !Not [ !Equals [ !Ref Route53HostedZoneId, ''] ], !Not [ !Equals [ !Ref DomainName, ''] ] ]
  CreateSNSForAlert: !Equals [ !Ref SNSForAlertArn, '']
  CreateSNSForDeployment: !Equals [ !Ref SNSForDeploymentArn, '']

Resources:
  # Nested Stack
  SNSForAlert:
    Condition: CreateSNSForAlert
    Type: AWS::Serverless::Application
    Properties:
      Location:
        ApplicationId: arn:aws:serverlessrepo:us-east-1:172664222583:applications/sns-topic
        SemanticVersion: 2.0.33
      NotificationARNs:
        - !If
          - CreateSNSForDeployment
          - !GetAtt SNSForDeployment.Outputs.SNSTopicArn
          - !Ref SNSForDeploymentArn
      Parameters:
        TopicName: !Sub Alert-createdby-${AWS::StackName}
      Tags:
        environment: !Ref Environment
        createdby: !Ref TagValue
  SNSForDeployment:
    Condition: CreateSNSForDeployment
    Type: AWS::Serverless::Application
    Properties:
      Location:
        ApplicationId: arn:aws:serverlessrepo:us-east-1:172664222583:applications/sns-topic
        SemanticVersion: 2.0.33
      Parameters:
        TopicName: !Sub Deployment-createdby-${AWS::StackName}
      Tags:
        environment: !Ref Environment
        createdby: !Ref TagValue
  # Service-linked Role
  ServiceLinkedRoleForAutoScaling:
    Type: AWS::IAM::ServiceLinkedRole
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
    Properties: 
      AWSServiceName: autoscaling.amazonaws.com
      Description: Default Service-Linked Role enables access to AWS Services and Resources used or managed by Auto Scaling
  ServiceLinkedRoleForElasticLoadBalancing:
    Type: AWS::IAM::ServiceLinkedRole
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
    Properties: 
      AWSServiceName: elasticloadbalancing.amazonaws.com 
      Description: Allows ELB to call AWS services on your behalf.
  # ELB
  LoadBalancer:
    DependsOn:
      - ServiceLinkedRoleForElasticLoadBalancing
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub elb-${LogicalNamePrefix}
      Scheme: internet-facing
      SecurityGroups:
       - !Ref EC2SecurityGroupId
      # For Network Load Balaner
      SubnetMappings: !If
        - CreateNetworkLoadBalancer
        - - SubnetId: !Ref SubnetId1ForELB
            AllocationId: !Ref EipAllocationId1ForNLB
          - SubnetId: !Ref SubnetId2ForELB
            AllocationId: !Ref EipAllocationId2ForNLB
        - !Ref AWS::NoValue
      # For Application Load Balaner
      Subnets: !If
        - CreateNetworkLoadBalancer
        - !Ref AWS::NoValue
        - - !Ref SubnetId1ForELB
          - !Ref SubnetId2ForELB
      Tags:
        - Key: Name
          Value: !Sub elb-${LogicalNamePrefix}-${AWS::Region}
        - Key: environment
          Value: !Ref Environment
        - Key: !Ref TagKey
          Value: !Ref TagValue
      Type: !Ref LoadBalancerType
  LoadBalancerTargetGroupHttp:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 3
      Name: !Sub target-${LogicalNamePrefix}
      Port: 80
      Protocol: !If
        - CreateNetworkLoadBalancer
        - TCP
        - HTTP
      Tags:
        - Key: Name
          Value: !Sub target-${LogicalNamePrefix}-${AWS::Region}
        - Key: environment
          Value: !Ref Environment
        - Key: !Ref TagKey
          Value: !Ref TagValue
      TargetType: instance
      UnhealthyThresholdCount: 3
      VpcId: !Ref VPCId
  LoadBalancerListenerHttp:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties: 
      DefaultActions:
        - TargetGroupArn: !Ref LoadBalancerTargetGroupHttp
          Type: forward
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: !If
        - CreateNetworkLoadBalancer
        - TCP
        - HTTP
  LoadBalancerListenerHttps:
    Condition: CreateCertificateManager
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      Certificates:
        - CertificateArn: !Ref CertificateManager
      DefaultActions:
        - TargetGroupArn: !Ref LoadBalancerTargetGroupHttp
          Type: forward
      LoadBalancerArn: !Ref LoadBalancer
      Port: 443
      Protocol: !If
        - CreateNetworkLoadBalancer
        - TLS
        - HTTPS
      # Default
      SslPolicy: ELBSecurityPolicy-2016-08
  # Auto Scaling Group
  AutoScalingLaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties: 
      AssociatePublicIpAddress: true
      BlockDeviceMappings: 
        - DeviceName: /dev/sda1
          Ebs: 
            DeleteOnTermination: true
            VolumeSize: !Ref EC2VolumeSize
            VolumeType: gp3
      EbsOptimized: true
      IamInstanceProfile: !Ref EC2IamInstanceProfileArn
      ImageId: !Ref EC2ImageId
      InstanceMonitoring: true
      InstanceType: !Ref EC2InstanceType
      KeyName: !If
        - KeyExists
        - !Ref EC2KeyName
        - !Ref AWS::NoValue
      LaunchConfigurationName: !Sub autoscalinglaunchconfiguration-${LogicalNamePrefix}
      SecurityGroups: 
        - !Ref EC2SecurityGroupId
  AutoScalingGroup:
    DependsOn:
      - ServiceLinkedRoleForAutoScaling
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties: 
      AutoScalingGroupName: !Sub autoscalinggroup-${LogicalNamePrefix}
      Cooldown: '300'
      DesiredCapacity: !Ref AutoScalingDesiredCapacity
      HealthCheckGracePeriod: 300
      HealthCheckType: EC2
      LaunchConfigurationName: !Ref AutoScalingLaunchConfiguration
      MaxSize: !Ref AutoScalingMaxSize
      MetricsCollection: 
        - Granularity: 1Minute
          Metrics:
            - GroupMinSize
            - GroupMaxSize
            - GroupDesiredCapacity
            - GroupInServiceInstances
            - GroupPendingInstances
            - GroupStandbyInstances
            - GroupTerminatingInstances
            - GroupTotalInstances
      MinSize: '1'
      NotificationConfigurations: 
        - NotificationTypes: 
            - autoscaling:EC2_INSTANCE_LAUNCH
            - autoscaling:EC2_INSTANCE_LAUNCH_ERROR
            - autoscaling:EC2_INSTANCE_TERMINATE
            - autoscaling:EC2_INSTANCE_TERMINATE_ERROR
            - autoscaling:TEST_NOTIFICATION
          TopicARN: !Ref SNSForAlertArn
      ServiceLinkedRoleARN: !Sub arn:aws:iam::${AWS::AccountId}:role/aws-service-role/autoscaling.amazonaws.com/AWSServiceRoleForAutoScaling
      Tags:
        - Key: environment
          PropagateAtLaunch: true
          Value: !Ref Environment
        - Key: !Ref TagKey
          PropagateAtLaunch: true
          Value: !Ref TagValue
      TargetGroupARNs:
        - !Join
          - ''
          - - !Sub 'arn:aws:elasticloadbalancing:${AWS::Region}:${AWS::AccountId}:'
            - !GetAtt LoadBalancerTargetGroupHttp.TargetGroupFullName
      TerminationPolicies: 
        - Default
      VPCZoneIdentifier: 
        - !Ref SubnetId1ForELB
        - !Ref SubnetId2ForELB
  # CertificateManager
  CertificateManager:
    Condition: CreateCertificateManager
    Type: AWS::CertificateManager::Certificate
    Properties: 
      DomainName: !Ref ACMDomainName
      ValidationMethod: !Ref ACMValidationMethod
      DomainValidationOptions: !If
        - CreateRoute53
        - - DomainName: !Ref ACMDomainName
            HostedZoneId: !Ref Route53HostedZoneId
        - !Ref AWS::NoValue
      Tags:
        - Key: environment
          Value: !Ref Environment
        - Key: !Ref TagKey
          Value: !Ref TagValue
  # Route53
  Route53RecordSet:
    Condition: CreateRoute53
    Type: AWS::Route53::RecordSet
    Properties: 
      AliasTarget: 
        DNSName: !GetAtt LoadBalancer.DNSName
        HostedZoneId: !GetAtt LoadBalancer.CanonicalHostedZoneID
      Comment: !Ref DomainName
      HostedZoneId: !Ref Route53HostedZoneId
      Name: !Ref DomainName
      # Alias record
      Type: A
  CloudWatchAlarmALBHttp:
    Type: AWS::Serverless::Application
    Properties:
      Parameters:
        CustomAlarmName: !Ref AWS::StackName
        LoadBalancer: !GetAtt LoadBalancer.LoadBalancerFullName
        SNSTopicArn: !If 
          - CreateSNSForAlert
          - !GetAtt SNSForAlert.Outputs.SNSTopicArn
          - !Ref SNSForAlertArn
        TargetGroup: !GetAtt LoadBalancerTargetGroupHttp.TargetGroupFullName
      NotificationARNs: 
        - !If
          - CreateSNSForDeployment
          - !GetAtt SNSForDeployment.Outputs.SNSTopicArn
          - !Ref SNSForDeploymentArn
      Location:
        ApplicationId: arn:aws:serverlessrepo:us-east-1:172664222583:applications/cloudwatch-alarm-about-application-elb
        SemanticVersion: 2.0.33
      Tags:
        environment: !Ref Environment
        createdby: !Ref TagValue
        
Outputs:
  LoadBalancerArn:
    Description: LoadBalancer ARN
    Value: !Ref LoadBalancer
  LoadBalancerDNSName:
    Description: LoadBalancer DNS Name
    Value: !GetAtt LoadBalancer.DNSName 