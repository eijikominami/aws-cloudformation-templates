AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: AWSCloudFormationTemplates/global creates global settings on N.Virginia Region.

Metadata: 
  AWS::CloudFormation::Interface:
    ParameterGroups: 
      - Label: 
          default: 'Certificate Manager Configuration'
        Parameters: 
          - ACMValidationMethod
          - ACMDomainName
          - DomainName
      - Label: 
          default: 'Billing Configuration'
        Parameters: 
          - BillingAlertThreshold
          - BudgetName
          - CostUsageReport
          - NotificationThreshold
      - Label: 
          default: 'CloudFront Alarm Configuration'
        Parameters: 
          - CloudFrontErrorRateThreshold
          - CloudFrontErrorRequestPerMinuteThreshold
          - CloudFrontBytesDownloadedPerMinuteThreshold
          - CloudFrontDistributionId
      - Label: 
          default: 'Notification Configuration'
        Parameters: 
          - SNSForAlertArn
      - Label: 
          default: 'Web ACL Configuration'
        Parameters: 
          - WebACL
      - Label: 
          default: 'Tag Configuration'
        Parameters:
          - Environment
          - TagKey
          - TagValue

Parameters:
  ACMValidationMethod:
    Type: String
    Default: DNS
    AllowedValues:
      - DNS
      - EMAIL
    Description: The validation method that you own or control the domain [required]
  ACMDomainName:
    Type: String
    Default: ''
    Description: The domain name created by Certification Manager
  BillingAlertThreshold:
    Type: Number
    Default: 0
    MinValue: 0
    Description: CloudWatch alarm threshold about Billing [required]
  BudgetName:
    Type: String
    Default: Total
    AllowedPattern: .+  
    Description: The budget name [required]
  CostUsageReport:
    Type: String
    Default: DISABLED
    AllowedValues:
      - ENABLED
      - DISABLED
    Description: Enable or disable AWS Config [required]
  CloudFrontErrorRateThreshold:
    Type: Number
    Default: 0
    MinValue: 0
    Description: CloudWatch alarm threshold about CloudFront ErrorRate [required]
  CloudFrontErrorRequestPerMinuteThreshold:
    Type: Number
    Default: 0
    MinValue: 0
    Description: CloudWatch alarm threshold about CloudFront ErrorRequestPerMinute [required]
  CloudFrontBytesDownloadedPerMinuteThreshold:
    Type: Number
    Default: 0
    MinValue: 0
    Description: CloudWatch alarm threshold about CloudFront BytesDownloadedPerMinute [required]
  CloudFrontDistributionId:
    Type: String
    Default: ''
    Description: The target distribution ID monitored by CloudWatch Alarm
  DomainName:
    Type: String
    Default: ''
    Description: The name of the domain
  NotificationThreshold:
    Type: Number
    Default: 10
    Description: The dollar value that triggers a notification if the threshold is exceeded [required]
  SNSForAlertArn:
    Type: String
    Default: '' 
  WebACL:
    Type: String
    Default: DISABLED
    AllowedValues:
      - ENABLED
      - DISABLED
    Description: Enable or disable WebACL [required]
  Environment:
    Type: String
    Default: production
    AllowedValues:
      - production
      - test
      - development
  TagKey:
    Type: String
    Default: createdby
    AllowedPattern: .+
  TagValue:
    Type: String
    Default: aws-cloudformation-templates
    AllowedPattern: .+

Conditions:
  CreateACMCertificate: !Not [ !Equals [ !Ref ACMDomainName, '' ] ]
  CreateCostUsageReport: !Equals [ !Ref CostUsageReport, ENABLED]
  CreateSNSForAlertTransfer: !Not [ !Equals [ !Ref SNSForAlertArn, ''] ]
  CreateBudget: !Not [ !Equals [ !Ref BillingAlertThreshold, 0 ] ]
  CreateCloudWatchAlarmBilling: !Not [ !Equals [ !Ref BillingAlertThreshold, 0 ] ]
  CreateCloudWatchAlarmCloudFrontErrorRate: !And [ !Not [ !Equals [ !Ref CloudFrontErrorRateThreshold, 0 ] ], !Not [ !Equals [ !Ref CloudFrontDistributionId, ''] ] ]
  CreateCloudWatchAlarmCloudFrontRequests: !And [ !Not [ !Equals [ !Ref CloudFrontErrorRequestPerMinuteThreshold, 0 ] ], !Not [ !Equals [ !Ref CloudFrontDistributionId, ''] ] ]
  CreateCloudWatchAlarmCloudFrontBytesDownloaded: !And [ !Not [ !Equals [ !Ref CloudFrontBytesDownloadedPerMinuteThreshold, 0 ] ], !Not [ !Equals [ !Ref CloudFrontDistributionId, ''] ] ]
  CreateRoute53: !Not [ !Equals [ !Ref DomainName, '' ] ]
  CreateWebACL: !Equals [ !Ref WebACL, ENABLED ]
  CreateCodeGuruCodeProfiler: !And [ !Not [ !Equals [ !Ref SNSForAlertArn, ''] ], !Equals [ !Ref Environment, development] ]
  Development: !Equals [ !Ref Environment, development]

Resources:
  # Nested Stack
  WAF:
    Condition: CreateWebACL
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        LogicalNamePrefix: !Ref AWS::StackName
        Scope: CLOUDFRONT
        Environment: !Ref Environment
        TagKey: !Ref TagKey
        TagValue: !Ref TagValue 
      Tags:
        - Key: environment
          Value: !Ref Environment
        - Key: !Ref TagKey
          Value: !Ref TagValue
      TemplateURL: !If
        - Development
        - https://s3.amazonaws.com/eijikominami-test/aws-cloudformation-templates/edge/waf.yaml
        - https://s3.amazonaws.com/eijikominami/aws-cloudformation-templates/edge/waf.yaml
  CodeGuruCodeProfiler:
    Condition: CreateCodeGuruCodeProfiler
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        AgentPermission: !GetAtt IAMRoleForLambda.Arn
        ProfilingGroupName: !Ref AWS::StackName
        SNSForAlertArn: !GetAtt SNSForAlert.Outputs.SNSTopicArn
        Environment: !Ref Environment
        TagKey: !Ref TagKey
        TagValue: !Ref TagValue 
      Tags:
        - Key: environment
          Value: !Ref Environment
        - Key: !Ref TagKey
          Value: !Ref TagValue
      TemplateURL: https://s3.amazonaws.com/eijikominami-test/aws-cloudformation-templates/cloudops/codeguruprofiler.yaml
  CostExplorer:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        NotificationThreshold: !Ref NotificationThreshold
        SNSForAlertArn: !GetAtt SNSForAlert.Outputs.SNSTopicArn
      TemplateURL: !If
        - Development
        - https://s3.amazonaws.com/eijikominami-test/aws-cloudformation-templates/global/costexplorer.yaml
        - https://s3.amazonaws.com/eijikominami/aws-cloudformation-templates/global/costexplorer.yaml
      Tags:
        - Key: environment
          Value: !Ref Environment
        - Key: !Ref TagKey
          Value: !Ref TagValue
  CUR:
    Condition: CreateCostUsageReport
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        Environment: !Ref Environment
        TagKey: !Ref TagKey
        TagValue: !Ref TagValue
      TemplateURL: !If
        - Development
        - https://s3.amazonaws.com/eijikominami-test/aws-cloudformation-templates/global/cur.yaml
        - https://s3.amazonaws.com/eijikominami/aws-cloudformation-templates/global/cur.yaml
      Tags:
        - Key: environment
          Value: !Ref Environment
        - Key: !Ref TagKey
          Value: !Ref TagValue
  SNSForAlert:
    Type: AWS::Serverless::Application
    Properties:
      Location:
        ApplicationId: arn:aws:serverlessrepo:us-east-1:172664222583:applications/sns-topic
        SemanticVersion: 2.1.14
      Parameters:
        TopicName: !Sub Alert-createdby-${AWS::StackName}
      Tags:
        environment: !Ref Environment
        createdby: !Ref TagValue
  # IAM
  IAMRoleForLambda:
    Condition: CreateSNSForAlertTransfer
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Description: A role required for Lambda to access SNS and CloudWatch Logs.
      ManagedPolicyArns:
          - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
          - arn:aws:iam::aws:policy/CloudWatchLambdaInsightsExecutionRolePolicy
          - arn:aws:iam::aws:policy/AmazonCodeGuruProfilerAgentAccess
      Policies:
        - PolicyName: SNS
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - sns:publish
                Resource:
                  - !Ref SNSForAlertArn
        - PolicyName: CloudWatchLogs
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                Resource: '*'
              - Effect: Allow
                Action:
                  - logs:PutLogEvents
                Resource: '*' 
      RoleName: !Sub ${AWS::StackName}-LambdaForGlobal-${AWS::Region}
      Tags:
        - Key: environment
          Value: !Ref Environment
        - Key: !Ref TagKey
          Value: !Ref TagValue
  # Budget 
  Budget:
    Condition: CreateBudget
    Type: AWS::Budgets::Budget
    Properties: 
      Budget: 
        BudgetLimit: 
          Amount: !Ref BillingAlertThreshold
          Unit: USD
        BudgetName: !Ref BudgetName
        BudgetType: COST
        TimeUnit: MONTHLY
      NotificationsWithSubscribers: 
        - Notification:
            ComparisonOperator: GREATER_THAN
            NotificationType: ACTUAL
            Threshold: 50
            ThresholdType: PERCENTAGE
          Subscribers: 
            - Address: !GetAtt SNSForAlert.Outputs.SNSTopicArn
              SubscriptionType: SNS
        - Notification:
            ComparisonOperator: GREATER_THAN
            NotificationType: ACTUAL
            Threshold: 80
            ThresholdType: PERCENTAGE
          Subscribers: 
            - Address: !GetAtt SNSForAlert.Outputs.SNSTopicArn
              SubscriptionType: SNS
        - Notification:
            ComparisonOperator: GREATER_THAN
            NotificationType: ACTUAL
            Threshold: 100
            ThresholdType: PERCENTAGE
          Subscribers: 
            - Address: !GetAtt SNSForAlert.Outputs.SNSTopicArn
              SubscriptionType: SNS
        - Notification:
            ComparisonOperator: GREATER_THAN
            NotificationType: ACTUAL
            Threshold: 150
            ThresholdType: PERCENTAGE
          Subscribers: 
            - Address: !GetAtt SNSForAlert.Outputs.SNSTopicArn
              SubscriptionType: SNS
        - Notification:
            ComparisonOperator: GREATER_THAN
            NotificationType: ACTUAL
            Threshold: 200
            ThresholdType: PERCENTAGE
          Subscribers: 
            - Address: !GetAtt SNSForAlert.Outputs.SNSTopicArn
              SubscriptionType: SNS
  # CertificateManager
  CertificateManager:
    Condition: CreateACMCertificate
    Type: AWS::CertificateManager::Certificate
    Properties: 
      DomainName: !Ref ACMDomainName
      ValidationMethod: !Ref ACMValidationMethod
      DomainValidationOptions: !If
        - CreateRoute53
        - - DomainName: !Ref ACMDomainName
            HostedZoneId: !Ref HostedZone
        - !Ref AWS::NoValue
      Tags:
        - Key: environment
          Value: !Ref Environment
        - Key: !Ref TagKey
          Value: !Ref TagValue
  CertificateManagerAccount:
    Condition: CreateACMCertificate
    Type: AWS::CertificateManager::Account
    Properties:
      ExpiryEventsConfiguration: 
        DaysBeforeExpiry: 45         
  # CloudWatch Alarm for ACM
  CloudWatchAlarmACM:
    Condition: CreateACMCertificate
    Type: AWS::Serverless::Application
    Properties:
      Location:
        ApplicationId: arn:aws:serverlessrepo:us-east-1:172664222583:applications/cloudwatch-alarm-about-acm
        SemanticVersion: 2.1.14
      Parameters:
        CustomAlarmName: !Ref AWS::StackName
        SNSTopicArn: !GetAtt SNSForAlert.Outputs.SNSTopicArn
        CertificateArn: !Ref CertificateManager
      Tags:
        environment: !Ref Environment
        createdby: !Ref TagValue
  # Route53
  HostedZone:
    Condition: CreateRoute53
    Type: AWS::Route53::HostedZone
    Properties: 
      HostedZoneConfig: 
        Comment: !Ref DomainName
      HostedZoneTags: 
        - Key: environment
          Value: !Ref Environment
        - Key: !Ref TagKey
          Value: !Ref TagValue
      Name: !Ref DomainName
  # CloudWatch
  CloudWatchAlarmBilling:
    Condition: CreateCloudWatchAlarmBilling
    Type: AWS::CloudWatch::Alarm
    Properties:
      ActionsEnabled: true
      AlarmActions:
        - !GetAtt SNSForAlert.Outputs.SNSTopicArn
      AlarmDescription: !Sub '*概算請求金額* が *$ ${BillingAlertThreshold} を超過* しています。'
      AlarmName: !Sub Warning-${AWS::StackName}-EstimatedCharges-is-Over-${BillingAlertThreshold}00-Yen
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
        - Name: Currency
          Value: USD
      EvaluationPeriods: 1
      MetricName: EstimatedCharges
      Namespace: AWS/Billing
      OKActions:
        - !GetAtt SNSForAlert.Outputs.SNSTopicArn
      Period: 21600
      Statistic: Maximum
      Threshold: !Ref BillingAlertThreshold
      TreatMissingData: notBreaching
  CloudWatchAlarmCloudFront4xxErrorRate:
    Condition: CreateCloudWatchAlarmCloudFrontErrorRate
    Type: AWS::CloudWatch::Alarm
    Properties:
      ActionsEnabled: true
      AlarmActions:
        - !GetAtt SNSForAlert.Outputs.SNSTopicArn
      AlarmDescription: '*CloudFront* の *4XXエラー率が増加* しています。'
      AlarmName: !Sub Warning-${AWS::StackName}-CloudFront-4XXErrorRate-Increased
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
        - Name: Region
          Value: Global
        - Name: DistributionId
          Value: !Ref CloudFrontDistributionId 
      EvaluationPeriods: 1
      MetricName: 4xxErrorRate
      Namespace: AWS/CloudFront
      OKActions:
        - !GetAtt SNSForAlert.Outputs.SNSTopicArn
      Period: 300
      Statistic: Average
      Threshold: !Ref CloudFrontErrorRateThreshold
      TreatMissingData: notBreaching
  CloudWatchAlarmCloudFront5xxErrorRate:
    Condition: CreateCloudWatchAlarmCloudFrontErrorRate
    Type: AWS::CloudWatch::Alarm
    Properties:
      ActionsEnabled: true
      AlarmActions:
        - !GetAtt SNSForAlert.Outputs.SNSTopicArn
      AlarmDescription: '*CloudFront* の *5XXエラー率が増加* しています。'
      AlarmName: !Sub Warning-${AWS::StackName}-CloudFront-5XXErrorRate-Increased
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
        - Name: Region
          Value: Global
        - Name: DistributionId
          Value: !Ref CloudFrontDistributionId 
      EvaluationPeriods: 1
      MetricName: 5xxErrorRate
      Namespace: AWS/CloudFront
      OKActions:
        - !GetAtt SNSForAlert.Outputs.SNSTopicArn
      Period: 300
      Statistic: Average
      Threshold: !Ref CloudFrontErrorRateThreshold
      TreatMissingData: notBreaching
  CloudWatchAlarmCloudFrontTotalErrorRate:
    Condition: CreateCloudWatchAlarmCloudFrontErrorRate
    Type: AWS::CloudWatch::Alarm
    Properties:
      ActionsEnabled: true
      AlarmActions:
        - !GetAtt SNSForAlert.Outputs.SNSTopicArn
      AlarmDescription: '*CloudFront* の *エラー率が増加* しています。'
      AlarmName: !Sub Warning-${AWS::StackName}-CloudFront-TotalErrorRate-Increased
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
        - Name: Region
          Value: Global
        - Name: DistributionId
          Value: !Ref CloudFrontDistributionId 
      EvaluationPeriods: 1
      MetricName: TotalErrorRate
      Namespace: AWS/CloudFront
      OKActions:
        - !GetAtt SNSForAlert.Outputs.SNSTopicArn
      Period: 300
      Statistic: Average
      Threshold: !Ref CloudFrontErrorRateThreshold
      TreatMissingData: notBreaching
  CloudWatchAlarmCloudFrontRequests:
    Condition: CreateCloudWatchAlarmCloudFrontRequests
    Type: AWS::CloudWatch::Alarm
    Properties:
      ActionsEnabled: true
      AlarmActions:
        - !GetAtt SNSForAlert.Outputs.SNSTopicArn
      AlarmDescription: '*CloudFront* の *リクエスト数が増加* しています。'
      AlarmName: !Sub Warning-${AWS::StackName}-CloudFront-Requests-Increased
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
        - Name: Region
          Value: Global
        - Name: DistributionId
          Value: !Ref CloudFrontDistributionId 
      EvaluationPeriods: 1
      MetricName: Requests
      Namespace: AWS/CloudFront
      OKActions:
        - !GetAtt SNSForAlert.Outputs.SNSTopicArn
      Period: 60
      Statistic: Maximum
      Threshold: !Ref CloudFrontErrorRequestPerMinuteThreshold
      TreatMissingData: notBreaching
  CloudWatchAlarmCloudFrontBytesDownloaded:
    Condition: CreateCloudWatchAlarmCloudFrontBytesDownloaded
    Type: AWS::CloudWatch::Alarm
    Properties:
      ActionsEnabled: true
      AlarmActions:
        - !GetAtt SNSForAlert.Outputs.SNSTopicArn
      AlarmDescription: '*CloudFront* の *ダウンロードサイズが増加* しています。'
      AlarmName: !Sub Warning-${AWS::StackName}-CloudFront-BytesDownloaded-Increased
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
        - Name: Region
          Value: Global
        - Name: DistributionId
          Value: !Ref CloudFrontDistributionId 
      EvaluationPeriods: 1
      MetricName: BytesDownloaded
      Namespace: AWS/CloudFront
      OKActions:
        - !GetAtt SNSForAlert.Outputs.SNSTopicArn
      Period: 60
      Statistic: Maximum
      Threshold: !Ref CloudFrontBytesDownloadedPerMinuteThreshold
      TreatMissingData: notBreaching
  # Lambda
  LambdaTransferSNSTopic:
    Condition: CreateSNSForAlertTransfer
    DependsOn:
      - LambdaTransferSNSTopicLogGroup
    Type: AWS::Lambda::Function
    Properties:
      Architectures:
        - arm64
      Code:
        ZipFile: !Sub |
          import boto3

          def lambda_handler(event, context):

            sns_topic_arn = '${SNSForAlertArn}'
            sns = boto3.client('sns',region_name=sns_topic_arn.split(':')[3])
            
            for record in event['Records']:
              if record['Sns']['Subject'] is None:
                  request = {
                    'TopicArn': '${SNSForAlertArn}',
                    'Message': record['Sns']['Message']
                  }
              else:
                  request = {
                      'TopicArn': '${SNSForAlertArn}',
                      'Message': record['Sns']['Message'],
                      'Subject': record['Sns']['Subject']
                  }  
              sns.publish(**request)
      Description: SNSトピックを転送します。
      Environment:
        Variables:
          AWS_LAMBDA_EXEC_WRAPPER:  !If
            - Development
            - /opt/codeguru_profiler_lambda_exec
            - !Ref AWS::NoValue
          AWS_CODEGURU_PROFILER_TARGET_REGION: !If
            - Development
            - !Ref AWS::Region
            - !Ref AWS::NoValue
      FunctionName: transferSNSTopic
      Handler: index.lambda_handler
      Layers:
        - !Sub arn:aws:lambda:${AWS::Region}:157417159150:layer:AWSCodeGuruProfilerPythonAgentLambdaLayer:11
      MemorySize: 128
      Role: !GetAtt IAMRoleForLambda.Arn
      Runtime: python3.9
      Tags:
        - Key: environment
          Value: !Ref Environment
        - Key: !Ref TagKey
          Value: !Ref TagValue
      Timeout: 3
      TracingConfig:
        Mode: Active
  LambdaTransferSNSTopicPermission:
    Condition: CreateSNSForAlertTransfer
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref LambdaTransferSNSTopic
      Principal: sns.amazonaws.com
      # DO NOT write 'SourceAccount' option.
      SourceArn: !GetAtt SNSForAlert.Outputs.SNSTopicArn
  LambdaTransferSNSTopicLogGroup:
    Condition: CreateSNSForAlertTransfer
    Type: AWS::Logs::LogGroup
    Properties: 
      LogGroupName: /aws/lambda/transferSNSTopic
      Tags: 
        - Key: environment
          Value: !Ref Environment
        - Key: !Ref TagKey
          Value: !Ref TagValue
  # SNS
  SNSSubscription:
    Condition: CreateSNSForAlertTransfer
    Type: AWS::SNS::Subscription
    Properties: 
      Endpoint: !GetAtt LambdaTransferSNSTopic.Arn
      Protocol: lambda
      TopicArn: !GetAtt SNSForAlert.Outputs.SNSTopicArn
  SNSTopicPolicy:
    Condition: CreateSNSForAlertTransfer
    Type: AWS::SNS::TopicPolicy
    Properties:
      Topics: 
        - !GetAtt SNSForAlert.Outputs.SNSTopicArn
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: AWSAnomalyDetectionSNSPublishingPermissions
            Effect: Allow
            Principal:
              Service: costalerts.amazonaws.com
            Resource: !GetAtt SNSForAlert.Outputs.SNSTopicArn
            Action: 'sns:Publish'
          - Sid: AWSBudgetsSNSPublishingPermissions
            Effect: Allow
            Principal:
              Service: budgets.amazonaws.com
            Resource: !GetAtt SNSForAlert.Outputs.SNSTopicArn
            Action: 'sns:Publish'
            Condition:
              StringEquals:
                aws:SourceAccount: !Ref AWS::AccountId
              ArnLike:
                aws:SourceArn: !Sub arn:aws:budgets::${AWS::AccountId}:*
  # CloudWatch Alarm for Lambda
  AlarmLambdaTransferSNSTopic:
    Condition: CreateSNSForAlertTransfer
    Type: AWS::Serverless::Application
    Properties:
      Location:
        ApplicationId: arn:aws:serverlessrepo:us-east-1:172664222583:applications/cloudwatch-alarm-about-lambda
        SemanticVersion: 2.1.14
      Parameters:
        CustomAlarmName: !Ref AWS::StackName
        SNSTopicArn: !GetAtt SNSForAlert.Outputs.SNSTopicArn
        MetricFilterPattern: ''
        FunctionResouceName: !Ref LambdaTransferSNSTopic
      Tags:
        environment: !Ref Environment
        createdby: !Ref TagValue
    
Outputs:
  CertificationARN:
    Condition: CreateACMCertificate
    Description: Certification ARN
    Value: !Ref CertificateManager
  HostedZoneId:
    Description: Hosted Zone Id
    Value: !If
      - CreateRoute53
      - !Ref HostedZone
      - ''
  WebACLArn:
    Description: WebACL Arn
    Value: !If
      - CreateWebACL
      - !GetAtt WAF.Outputs.WebACLArn
      - ''