AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: AWSCloudFormationTemplates/analytics/googleanalytics creates a data lake for Google Analytics.

Metadata: 
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label: 
          default: 'Glue Configuration'
        Parameters: 
          - LogicalNamePrefix
      - Label: 
          default: 'S3 Configuration'
        Parameters: 
          - S3BucketName
      - Label: 
          default: 'Notification Configuration'
        Parameters: 
          - SNSForAlertArn
      - Label: 
          default: 'Tag Configuration'
        Parameters:
          - Environment 
          - TagKey
          - TagValue

Parameters:
  LogicalNamePrefix: 
    Type: String
    Default: 'GoogleAnalytics'
    Description: The custom prefix name [required]
  S3BucketName:
    Type: String
    AllowedPattern: .+
    Description: The bucket name data are stored [required]
  SNSForAlertArn:
    Type: String
    Default: ''
  SNSForDeploymentArn:
    Type: String
    Default: ''
  Environment:
    Type: String
    Default: development
    AllowedValues:
      - production
      - test
      - development
  TagKey:
    Type: String
    Default: createdby
    AllowedPattern: .+
  TagValue:
    Type: String
    Default: aws-cloudformation-samples
    AllowedPattern: .+

Conditions:
  CreateSNSForAlert: !Equals [ !Ref SNSForAlertArn, '']
  CreateSNSForDeployment: !Equals [ !Ref SNSForDeploymentArn, '']
  Development: !Equals [ !Ref Environment, development]

Resources:
  # Nested Stack
  CodeGuruCodeProfiler:
    Condition: Development
    Type: AWS::CloudFormation::Stack
    Properties:
      NotificationARNs:
        - !If
          - CreateSNSForDeployment
          - !GetAtt SNSForDeployment.Outputs.SNSTopicArn
          - !Ref SNSForDeploymentArn
      Parameters:
        AgentPermission: !GetAtt IAMRoleForLambda.Arn
        ProfilingGroupName: !Ref AWS::StackName
        SNSForAlertArn: !If
          - CreateSNSForAlert
          - !GetAtt SNSForAlert.Outputs.SNSTopicArn
          - !Ref SNSForAlertArn
        Environment: !Ref Environment
        TagKey: !Ref TagKey
        TagValue: !Ref TagValue 
      Tags:
        - Key: environment
          Value: !Ref Environment
        - Key: !Ref TagKey
          Value: !Ref TagValue
      TemplateURL: https://s3.amazonaws.com/eijikominami-test/aws-cloudformation-templates/cloudops/codeguruprofiler.yaml
  SNSForAlert:
    Condition: CreateSNSForAlert
    Type: AWS::Serverless::Application
    Properties:
      Location:
        ApplicationId: arn:aws:serverlessrepo:us-east-1:172664222583:applications/sns-topic
        SemanticVersion: 2.0.26
      NotificationARNs:
        - !If
          - CreateSNSForDeployment
          - !GetAtt SNSForDeployment.Outputs.SNSTopicArn
          - !Ref SNSForDeploymentArn
      Parameters:
        TopicName: !Sub Alert-createdby-${AWS::StackName}
      Tags:
        environment: !Ref Environment
        createdby: !Ref TagValue
  SNSForDeployment:
    Condition: CreateSNSForDeployment
    Type: AWS::Serverless::Application
    Properties:
      Location:
        ApplicationId: arn:aws:serverlessrepo:us-east-1:172664222583:applications/sns-topic
        SemanticVersion: 2.0.26
      Parameters:
        TopicName: !Sub Deployment-createdby-${AWS::StackName}
      Tags:
        environment: !Ref Environment
        createdby: !Ref TagValue
  IAMRoleForLambda:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Description: A role required for Lambda to access S3 and CloudWatch Logs.
      ManagedPolicyArns:
          - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
          - arn:aws:iam::aws:policy/CloudWatchLambdaInsightsExecutionRolePolicy
          - arn:aws:iam::aws:policy/AmazonCodeGuruProfilerAgentAccess
      Policies:
        - PolicyName: CloudWatchLogs
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                Resource: '*'
              - Effect: Allow
                Action:
                  - logs:PutLogEvents
                Resource: '*'
        - PolicyName: S3
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                Resource: 
                  - !Sub arn:aws:s3:::datalake-source-${AWS::Region}-${AWS::AccountId}
                  - !Sub arn:aws:s3:::datalake-source-${AWS::Region}-${AWS::AccountId}/*
      RoleName: !Sub ${LogicalNamePrefix}-Lambda-${AWS::Region}
      Tags:
        - Key: environment
          Value: !Ref Environment
        - Key: !Ref TagKey
          Value: !Ref TagValue
  LambdaGaConverter:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: gaConverter/
      Description: Google Analytics のデータを変換します。
      Environment:
        Variables:
          AWS_CODEGURU_PROFILER_GROUP_ARN: !If
            - Development
            - !GetAtt CodeGuruCodeProfiler.Outputs.ProfilerArn
            - !Ref AWS::NoValue
          AWS_CODEGURU_PROFILER_TARGET_REGION: !Ref AWS::Region
      FunctionName: !Sub gaConverter-createdby-${LogicalNamePrefix}
      Layers: !If
        - Development
        - - !Sub arn:aws:lambda:${AWS::Region}:157417159150:layer:AWSCodeGuruProfilerPythonAgentLambdaLayer:11
          - !Sub arn:aws:lambda:${AWS::Region}:580247275435:layer:LambdaInsightsExtension:2
        - !Ref AWS::NoValue
      Handler: lambda_function.lambda_handler
      MemorySize: 512
      Role: !GetAtt IAMRoleForLambda.Arn
      Runtime: python3.9
      Timeout: 30
      Tracing: Active
      Tags:
        environment: !Ref Environment
        createdby: !Ref TagValue
  LambdaGaConverterPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt LambdaGaConverter.Arn
      Principal: s3.amazonaws.com
      SourceAccount: !Ref AWS::AccountId
      SourceArn: !Sub arn:aws:s3:::${S3BucketName}
  LogGroupForLambdaGaConverter:
    Type: AWS::Logs::LogGroup
    Properties: 
      LogGroupName: !Sub /aws/lambda/${LambdaGaConverter}
      RetentionInDays: 60
      Tags: 
        - Key: environment
          Value: !Ref Environment
        - Key: !Ref TagKey
          Value: !Ref TagValue
  AlarmLambdaGaConverter:
    Type: AWS::Serverless::Application
    Properties:
      Parameters:
        CustomAlarmName: !Ref LogicalNamePrefix
        SNSTopicArn: !If
          - CreateSNSForAlert
          - !GetAtt SNSForAlert.Outputs.SNSTopicArn
          - !Ref SNSForAlertArn
        MetricFilterPattern: ''
        FunctionResouceName: !Ref LambdaGaConverter
      NotificationARNs: 
        - !If
          - CreateSNSForDeployment
          - !GetAtt SNSForDeployment.Outputs.SNSTopicArn
          - !Ref SNSForDeploymentArn
      Location:
        ApplicationId: arn:aws:serverlessrepo:us-east-1:172664222583:applications/cloudwatch-alarm-about-lambda
        SemanticVersion: 2.0.26
      Tags:
        environment: !Ref Environment
        createdby: !Ref TagValue
  GlueTable:
    Type: AWS::Glue::Table
    Properties:
      CatalogId: !Ref AWS::AccountId
      DatabaseName: !Ref LogicalNamePrefix
      TableInput:
        Name: google_analytics_parquet
        Description: Parquet format Google Analytics logs
        TableType: EXTERNAL_TABLE
        Parameters: { 'has_encrypted_data': 'false', 'parquet.compression': 'SNAPPY' }
        StorageDescriptor:
          Columns:
            - Name: year
              Type: int
            - Name: month
              Type: int
            - Name: day
              Type: int
            - Name: hour
              Type: int
            - Name: device
              Type: string
            - Name: user_count
              Type: int
          InputFormat: org.apache.hadoop.hive.ql.io.parquet.MapredParquetInputFormat
          Location: !Sub s3://${S3BucketName}/GoogleAnalytics-parquet/
          OutputFormat: org.apache.hadoop.hive.ql.io.parquet.MapredParquetOutputFormat
          SerdeInfo:
            SerializationLibrary: org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe

Outputs:
  LambdaArn:
    Description: The ARN of LambdaGaConverter
    Value: !GetAtt LambdaGaConverter.Arn