AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: AWSCloudFormationTemplates/shared sets shared services.

Metadata: 
  AWS::CloudFormation::Interface:
    ParameterGroups: 
      - Label: 
          default: 'Microsoft Active Directory Configuration'
        Parameters: 
          - ActiveDirectoryEdition
          - ActiveDirectoryEnableSso
          - ActiveDirectoryName
          - ActiveDirectoryPassword
          - ActiveDirectoryShortName
          - ActiveDirectorySubnetCidrBlockForAz1
          - ActiveDirectorySubnetCidrBlockForAz2
      - Label: 
          default: 'VPC Configuration'
        Parameters:
          - ResolverRuleId
          - SubnetPrivateCidrBlockAz1
          - SubnetPrivateCidrBlockAz2
          - SubnetPrivateCidrBlockAz3
          - SubnetTransitCidrBlockAz1
          - SubnetTransitCidrBlockAz2
          - SubnetTransitCidrBlockAz3
          - TransitGatewayId
          - TransitGatewayDestinationCidrBlock
          - VPCCidrBlock
      - Label: 
          default: 'Route 53 Configuration'
        Parameters: 
          - DomainName
      - Label: 
          default: 'Identity Center Configuration'
        Parameters: 
          - IdentityCenterArn
      - Label: 
          default: 'FluentBit Configuration'
        Parameters: 
          - AccountIdForArchive
          - BucketNameForArchive
          - FluentBitForSyslog
          - FluentBitAddress1
          - FluentBitAddress2
          - FluentBitAddress3
      - Label: 
          default: 'Notification Configuration'
        Parameters: 
          - SNSForAlertArn
          - SNSForDeploymentArn
      - Label: 
          default: 'Tag Configuration'
        Parameters:
          - Environment 
          - TagKey
          - TagValue

Parameters:
  AccountIdForArchive:
    Type: String
    Default: ''
    Description: The AWS account id for log archive
  ActiveDirectoryEdition:
    Type: String
    Default: Standard
    AllowedValues:
      - Enterprise
      - Standard
    Description: The edition of AWS Directory Service for Microsoft Active Directory [required]
  ActiveDirectoryEnableSso:
    Type: String
    Default: true
    AllowedValues:
      - true
      - false
    Description: Whether to enable single sign-on for a Microsoft Active Directory in AWS [required]
  ActiveDirectoryName:
    Type: String
    Default: corp.example.com
    AllowedPattern: ^([a-zA-Z0-9]+[\\.-])+([a-zA-Z0-9])+$
    Description: The fully qualified domain name for the AWS Managed Microsoft AD directory [required]
  ActiveDirectoryPassword:
    Type: String
    Default: Password1+
    AllowedPattern: (?=^.{8,64}$)((?=.*\d)(?=.*[A-Z])(?=.*[a-z])|(?=.*\d)(?=.*[^A-Za-z0-9\s])(?=.*[a-z])|(?=.*[^A-Za-z0-9\s])(?=.*[A-Z])(?=.*[a-z])|(?=.*\d)(?=.*[A-Z])(?=.*[^A-Za-z0-9\s]))^.*
    NoEcho: true
    Description: The password for the default administrative user named Admin [required]
  ActiveDirectoryShortName:
    Type: String
    Default: CORP
    AllowedPattern: ^[^\\/:*?"<>|.]+[^\\/:*?"<>|]*$
    Description: The NetBIOS name for your domain [required]
  ActiveDirectorySubnetCidrBlockForAz1:
    Type: String
    Default: 10.3.0.0/26
    AllowedPattern: ^[0-9./]*$
    Description: The public subnet CIDR block at AZ1 [required]
  ActiveDirectorySubnetCidrBlockForAz2:
    Type: String
    Default: 10.3.64.0/26
    AllowedPattern: ^[0-9./]*$
    Description: The public subnet CIDR block at AZ2 [required]
  BucketNameForArchive:
    Type: String
    Default: ''
    Description: The Amazon S3 bucket name for log archive
  DomainName:
    Type: String
    Default: ''
    Description: The private domain name which this VPC has
  FluentBitForSyslog:
    Type: String
    Default: ENABLED
    AllowedValues:
      - ENABLED
      - DISABLED
    Description: Whether to enable FluentBit for collecting syslog format logs
  IdentityCenterArn:
    Type: String
    Default: ''
    Description: The ARN of the IAM Identity Center instance under which the operation will be executed
  FluentBitAddress1:
    Type: String
    Default: 10.3.0.114
    Description: The private IPv4 address for FluentBit
  FluentBitAddress2:
    Type: String
    Default: 10.3.64.114
    Description: The private IPv4 address for FluentBit
  FluentBitAddress3:
    Type: String
    Default: 10.3.128.114
    Description: The private IPv4 address for FluentBit
  SubnetPrivateCidrBlockAz1:
    Type: String
    Default: 10.3.0.64/26
    AllowedPattern: ^[0-9./]*$
    Description: The private subnet CIDR block at AZ1
  SubnetTransitCidrBlockAz1:
    Type: String
    Default: 10.3.0.128/26
    AllowedPattern: ^[0-9./]*$
    Description: The transit subnet CIDR block at AZ1
  SubnetPrivateCidrBlockAz2:
    Type: String
    Default: 10.3.64.64/26
    AllowedPattern: ^[0-9./]*$
    Description: The private subnet CIDR block at AZ2
  SubnetTransitCidrBlockAz2:
    Type: String
    Default: 10.3.64.128/26
    AllowedPattern: ^[0-9./]*$
    Description: The transit subnet CIDR block at AZ2
  SubnetPrivateCidrBlockAz3:
    Type: String
    Default: 10.3.128.64/26
    AllowedPattern: ^[0-9./]*$
    Description: The private subnet CIDR block at AZ3
  SubnetTransitCidrBlockAz3:
    Type: String
    Default: 10.3.128.128/26
    AllowedPattern: ^[0-9./]*$
    Description: The transit subnet CIDR block at AZ3
  ResolverRuleId:
    Type: String
    Default: ''
    Description: The ID of the Resolver rule that you associated with the VPC that is specified by VPCId
  TransitGatewayId:
    Type: String
    Default: ''
    Description: The ID of a transit gateway
  TransitGatewayDestinationCidrBlock:
    Type: String
    Default: ''
    Description: The IPv4 CIDR block forward to TransitGateway
  VPCCidrBlock:
    Type: String
    Default: 10.3.0.0/16
    AllowedPattern: ^[0-9./]*$
    Description: The VPC CIDR block [required]
  SNSForAlertArn:
    Type: String
    Default: '' 
  SNSForDeploymentArn:
    Type: String
    Default: ''
  Environment:
    Type: String
    Default: production
    AllowedValues:
      - production
      - test
      - development
  TagKey:
    Type: String
    Default: createdby
    AllowedPattern: .+
  TagValue:
    Type: String
    Default: aws-cloudformation-templates
    AllowedPattern: .+

Conditions:
  CreateFluentBitForSyslog: !Equals [ !Ref FluentBitForSyslog, ENABLED]
  CreateRoute53HostedZone: !Not [ !Equals [ !Ref DomainName, ''] ]
  CreateRoute53ResolverResolverRuleAssociation: !Not [ !Equals [ !Ref ResolverRuleId, '' ] ]
  CreateSNSForAlert: !Equals [ !Ref SNSForAlertArn, '']
  CreateSNSForDeployment: !Equals [ !Ref SNSForDeploymentArn, '']
  CreateTransitGateway: !And [ !Not [ !Equals [ !Ref TransitGatewayId, '' ] ], !Not [ !Equals [ !Ref TransitGatewayDestinationCidrBlock, '' ] ] ]
  Development: !Equals [ !Ref Environment, development]

Resources:
  # Nested Stack
  MicrosoftAD:
    Type: AWS::CloudFormation::Stack
    Properties:
      NotificationARNs:
        - !If
          - CreateSNSForDeployment
          - !GetAtt SNSForDeployment.Outputs.SNSTopicArn
          - !Ref SNSForDeploymentArn
      Parameters: 
        Edition: !Ref ActiveDirectoryEdition
        EnableSso: !Ref ActiveDirectoryEnableSso
        LogicalName: !Ref AWS::StackName
        Name: !Ref ActiveDirectoryName
        Password: !Ref ActiveDirectoryPassword
        ShortName: !Ref ActiveDirectoryShortName
        SubnetPrivateCidrBlockForAz1: !Ref ActiveDirectorySubnetCidrBlockForAz1
        SubnetPrivateCidrBlockForAz2: !Ref ActiveDirectorySubnetCidrBlockForAz2
        VPCId: !Ref VPC
        TagKey: !Ref TagKey
        TagValue: !Ref TagValue
      TemplateURL: !If
        - Development
        - https://s3.amazonaws.com/eijikominami-test/aws-cloudformation-templates/identity/microsoftad.yaml
        - https://s3.amazonaws.com/eijikominami/aws-cloudformation-templates/identity/microsoftad.yaml
      Tags:
        - Key: environment
          Value: !Ref Environment
        - Key: !Ref TagKey
          Value: !Ref TagValue
  Az1:
    Type: AWS::Serverless::Application
    Properties:
      Location:
        ApplicationId: arn:aws:serverlessrepo:us-east-1:172664222583:applications/availability-zone
        SemanticVersion: 2.2.2
      NotificationARNs:
        - !If
          - CreateSNSForDeployment
          - !GetAtt SNSForDeployment.Outputs.SNSTopicArn
          - !Ref SNSForDeploymentArn
      Parameters:
        AvailabilityZone: !Select 
          - 0
          - Fn::GetAZs: !Ref 'AWS::Region'
        LogicalName: !Ref AWS::StackName
        SubnetPrivateCidrBlock: !Ref SubnetPrivateCidrBlockAz1
        SubnetTransitCidrBlock: !Ref SubnetTransitCidrBlockAz1
        SNSForAlertArn: !If
          - CreateSNSForAlert
          - !GetAtt SNSForAlert.Outputs.SNSTopicArn
          - !Ref SNSForAlertArn
        SNSForDeploymentArn: !If
          - CreateSNSForDeployment
          - !GetAtt SNSForDeployment.Outputs.SNSTopicArn
          - !Ref SNSForDeploymentArn   
        VPCId: !Ref VPC
        Environment: !Ref Environment
        TagKey: !Ref TagKey
        TagValue: !Ref TagValue
      Tags:
        environment: !Ref Environment
        createdby: !Ref TagValue
  Az2:
    Type: AWS::Serverless::Application
    Properties:
      Location:
        ApplicationId: arn:aws:serverlessrepo:us-east-1:172664222583:applications/availability-zone
        SemanticVersion: 2.2.2
      NotificationARNs:
        - !If
          - CreateSNSForDeployment
          - !GetAtt SNSForDeployment.Outputs.SNSTopicArn
          - !Ref SNSForDeploymentArn
      Parameters:
        AvailabilityZone: !Select
          - 1
          - Fn::GetAZs: !Ref 'AWS::Region'
        LogicalName: !Ref AWS::StackName
        SubnetPrivateCidrBlock: !Ref SubnetPrivateCidrBlockAz2
        SubnetTransitCidrBlock: !Ref SubnetTransitCidrBlockAz2
        SNSForAlertArn: !If
          - CreateSNSForAlert
          - !GetAtt SNSForAlert.Outputs.SNSTopicArn
          - !Ref SNSForAlertArn
        SNSForDeploymentArn: !If
          - CreateSNSForDeployment
          - !GetAtt SNSForDeployment.Outputs.SNSTopicArn
          - !Ref SNSForDeploymentArn 
        VPCId: !Ref VPC
        Environment: !Ref Environment
        TagKey: !Ref TagKey
        TagValue: !Ref TagValue 
      Tags:
        environment: !Ref Environment
        createdby: !Ref TagValue
  Az3:
    Type: AWS::Serverless::Application
    Properties:
      Location:
        ApplicationId: arn:aws:serverlessrepo:us-east-1:172664222583:applications/availability-zone
        SemanticVersion: 2.2.2
      NotificationARNs:
        - !If
          - CreateSNSForDeployment
          - !GetAtt SNSForDeployment.Outputs.SNSTopicArn
          - !Ref SNSForDeploymentArn
      Parameters:
        AvailabilityZone: !Select
          - 1
          - Fn::GetAZs: !Ref 'AWS::Region'
        LogicalName: !Ref AWS::StackName
        SubnetPrivateCidrBlock: !Ref SubnetPrivateCidrBlockAz3
        SubnetTransitCidrBlock: !Ref SubnetTransitCidrBlockAz3
        SNSForAlertArn: !If
          - CreateSNSForAlert
          - !GetAtt SNSForAlert.Outputs.SNSTopicArn
          - !Ref SNSForAlertArn
        SNSForDeploymentArn: !If
          - CreateSNSForDeployment
          - !GetAtt SNSForDeployment.Outputs.SNSTopicArn
          - !Ref SNSForDeploymentArn 
        VPCId: !Ref VPC
        Environment: !Ref Environment
        TagKey: !Ref TagKey
        TagValue: !Ref TagValue 
      Tags:
        environment: !Ref Environment
        createdby: !Ref TagValue
  IdentityCenter:
    Type: AWS::CloudFormation::Stack
    Properties:
      NotificationARNs:
        - !If
          - CreateSNSForDeployment
          - !GetAtt SNSForDeployment.Outputs.SNSTopicArn
          - !Ref SNSForDeploymentArn
      Parameters: 
        DefaultSessionDuration: PT12H
        InstanceArn: !Ref IdentityCenterArn
        LogicalName: !Ref AWS::StackName
        Environment: !Ref Environment
        TagKey: !Ref TagKey
        TagValue: !Ref TagValue
      TemplateURL: !If
        - Development
        - https://s3.amazonaws.com/eijikominami-test/aws-cloudformation-templates/identity/identitycenter.yaml
        - https://s3.amazonaws.com/eijikominami/aws-cloudformation-templates/identity/identitycenter.yaml
      Tags:
        - Key: environment
          Value: !Ref Environment
        - Key: !Ref TagKey
          Value: !Ref TagValue
  FluentBit:
    Condition: CreateFluentBitForSyslog
    Type: AWS::CloudFormation::Stack
    Properties:
      NotificationARNs:
        - !If
          - CreateSNSForDeployment
          - !GetAtt SNSForDeployment.Outputs.SNSTopicArn
          - !Ref SNSForDeploymentArn
      Parameters: 
        AccountIdForArchive: !Ref AccountIdForArchive
        BucketNameForArchive: !Ref BucketNameForArchive
        CpuArchitecture: ARM64
        ImageUri: public.ecr.aws/r7j6d5k5/aws-for-fluent-bit
        NlbIPv4Address1: !Ref FluentBitAddress1
        NlbIPv4Address2: !Ref FluentBitAddress2
        NlbIPv4Address3: !Ref FluentBitAddress3
        SubnetId1: !GetAtt Az1.Outputs.PrivateSubnetId
        SubnetId2: !GetAtt Az2.Outputs.PrivateSubnetId
        SubnetId3: !GetAtt Az3.Outputs.PrivateSubnetId
        VPCId: !Ref VPC
        SNSForAlertArn: !If
          - CreateSNSForAlert
          - !GetAtt SNSForAlert.Outputs.SNSTopicArn
          - !Ref SNSForAlertArn
        SNSForDeploymentArn: !If
          - CreateSNSForDeployment
          - !GetAtt SNSForDeployment.Outputs.SNSTopicArn
          - !Ref SNSForDeploymentArn
        Environment: !Ref Environment
        TagKey: !Ref TagKey
        TagValue: !Ref TagValue
      TemplateURL: !If
        - Development
        - https://s3.amazonaws.com/eijikominami-test/aws-cloudformation-templates/shared/fluentbit.yaml
        - https://s3.amazonaws.com/eijikominami/aws-cloudformation-templates/shared/fluentbit.yaml
      Tags:
        - Key: environment
          Value: !Ref Environment
        - Key: !Ref TagKey
          Value: !Ref TagValue
  SNSForAlert:
    Condition: CreateSNSForAlert
    Type: AWS::Serverless::Application
    Properties:
      Location:
        ApplicationId: arn:aws:serverlessrepo:us-east-1:172664222583:applications/sns-topic
        SemanticVersion: 2.2.2
      NotificationARNs:
        - !If
          - CreateSNSForDeployment
          - !GetAtt SNSForDeployment.Outputs.SNSTopicArn
          - !Ref SNSForDeploymentArn
      Parameters:
        TopicName: !Sub Alert-createdby-${AWS::StackName}
      Tags:
        environment: !Ref Environment
        createdby: !Ref TagValue
  SNSForDeployment:
    Condition: CreateSNSForDeployment
    Type: AWS::Serverless::Application
    Properties:
      Location:
        ApplicationId: arn:aws:serverlessrepo:us-east-1:172664222583:applications/sns-topic
        SemanticVersion: 2.2.2
      Parameters:
        TopicName: !Sub Deployment-createdby-${AWS::StackName}
      Tags:
        environment: !Ref Environment
        createdby: !Ref TagValue
  # IAM
  IAMRoleForVPCFlowLog:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: vpc-flow-logs.amazonaws.com
            Action: sts:AssumeRole
      Description: A role required for VPC FlowLog.
      Policies:
        - PolicyName: CloudWatchLogs
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:DescribeLogGroups
                  - logs:DescribeLogStreams
                Resource: '*'
      RoleName: !Sub ${AWS::StackName}-AWSVPCFlowLogRole-${AWS::Region}
      Tags:
        - Key: environment
          Value: !Ref Environment
        - Key: !Ref TagKey
          Value: !Ref TagValue
  # IAM Role for multi account automation
  SSMMasterAccountRole: 
    Type: AWS::IAM::Role
    Properties: 
      AssumeRolePolicyDocument: 
        Version: 2012-10-17
        Statement: 
          - Effect: Allow
            Principal: 
              Service: ssm.amazonaws.com
            Action: 
              - sts:AssumeRole
      Path: '/'
      Policies: 
        - PolicyName: AssumeRole-AWSSystemsManagerAutomationExecutionRole
          PolicyDocument: 
            Version: 2012-10-17
            Statement: 
              - Effect: Allow
                Action: 
                - sts:AssumeRole
                Resource: arn:aws:iam::*:role/AWS-SystemsManager-AutomationExecutionRole
              - Effect: Allow
                Action: 
                  - organizations:ListAccountsForParent
                Resource: 
                  - '*'
      RoleName: AWS-SystemsManager-AutomationAdministrationRole
      Tags:
        - Key: environment
          Value: !Ref Environment
        - Key: !Ref TagKey
          Value: !Ref TagValue
  # VPC
  VPC:
    Type: AWS::EC2::VPC
    Properties: 
      CidrBlock: !Ref VPCCidrBlock
      # VPC endpoint uses a private DNS.
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub vpc-${AWS::StackName}-${AWS::Region}
        - Key: environment
          Value: !Ref Environment
        - Key: !Ref TagKey
          Value: !Ref TagValue
  VPCFlowLog:
    Type: AWS::EC2::FlowLog
    Properties: 
      DeliverLogsPermissionArn: !GetAtt IAMRoleForVPCFlowLog.Arn
      LogDestinationType: cloud-watch-logs
      LogGroupName: !Ref CloudWatchLogsGroupForVPCFlowLog
      ResourceId: !Ref VPC
      ResourceType: VPC
      TrafficType: ALL
      Tags: 
        - Key: environment
          Value: !Ref Environment
        - Key: !Ref TagKey
          Value: !Ref TagValue
  Route53ResolverRuleAssociation:
    Condition: CreateRoute53ResolverResolverRuleAssociation
    Type: AWS::Route53Resolver::ResolverRuleAssociation
    Properties:
      Name: Onprem
      ResolverRuleId: !Ref ResolverRuleId
      VPCId: !Ref VPC
  RouteMicrosoftADPrivateToTransitGatewayAz1:
    Condition: CreateTransitGateway
    DependsOn:
      - TransitGatewayAttachment
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: !Ref TransitGatewayDestinationCidrBlock
      TransitGatewayId: !Ref TransitGatewayId
      RouteTableId: !GetAtt MicrosoftAD.Outputs.RouteTableIdPrivateAz1
  RouteMicrosoftADPrivateToTransitGatewayAz2:
    Condition: CreateTransitGateway
    DependsOn:
      - TransitGatewayAttachment
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: !Ref TransitGatewayDestinationCidrBlock
      TransitGatewayId: !Ref TransitGatewayId
      RouteTableId: !GetAtt MicrosoftAD.Outputs.RouteTableIdPrivateAz2
  RoutePrivateToTransitGatewayAz1:
    Condition: CreateTransitGateway
    DependsOn:
      - TransitGatewayAttachment
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: !Ref TransitGatewayDestinationCidrBlock
      TransitGatewayId: !Ref TransitGatewayId
      RouteTableId: !GetAtt Az1.Outputs.RouteTableIdPrivate
  RoutePrivateToTransitGatewayAz2:
    Condition: CreateTransitGateway
    DependsOn:
      - TransitGatewayAttachment
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: !Ref TransitGatewayDestinationCidrBlock
      TransitGatewayId: !Ref TransitGatewayId
      RouteTableId: !GetAtt Az2.Outputs.RouteTableIdPrivate
  RoutePrivateToTransitGatewayAz3:
    Condition: CreateTransitGateway
    DependsOn:
      - TransitGatewayAttachment
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: !Ref TransitGatewayDestinationCidrBlock
      TransitGatewayId: !Ref TransitGatewayId
      RouteTableId: !GetAtt Az3.Outputs.RouteTableIdPrivate
  # Peering connections with Transit Gateway and VPC for outbound traffic
  TransitGatewayAttachment:
    Condition: CreateTransitGateway
    Type: AWS::EC2::TransitGatewayAttachment
    Properties: 
      SubnetIds:
        - !GetAtt Az1.Outputs.TransitSubnetId
        - !GetAtt Az2.Outputs.TransitSubnetId
        - !GetAtt Az3.Outputs.TransitSubnetId
      Tags:
        - Key: Name
          Value: !Sub tgw-attach-${AWS::StackName}-${AWS::Region}
        - Key: environment
          Value: !Ref Environment
        - Key: !Ref TagKey
          Value: !Ref TagValue
      TransitGatewayId: !Ref TransitGatewayId
      VpcId: !Ref VPC
  RouteTransitToTransitGatewayAz1:
    Condition: CreateTransitGateway
    DependsOn:
      - TransitGatewayAttachment
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: !Ref TransitGatewayDestinationCidrBlock
      TransitGatewayId: !Ref TransitGatewayId
      RouteTableId: !GetAtt Az1.Outputs.RouteTableIdTransit
  RouteTransitToTransitGatewayAz2:
    Condition: CreateTransitGateway
    DependsOn:
      - TransitGatewayAttachment
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: !Ref TransitGatewayDestinationCidrBlock
      TransitGatewayId: !Ref TransitGatewayId
      RouteTableId: !GetAtt Az2.Outputs.RouteTableIdTransit
  RouteTransitToTransitGatewayAz3:
    Condition: CreateTransitGateway
    DependsOn:
      - TransitGatewayAttachment
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: !Ref TransitGatewayDestinationCidrBlock
      TransitGatewayId: !Ref TransitGatewayId
      RouteTableId: !GetAtt Az3.Outputs.RouteTableIdTransit
  # Route 53 Hosted Zone
  Route53HostedZone:
    Condition: CreateRoute53HostedZone
    Type: AWS::Route53::HostedZone
    Properties:
      HostedZoneConfig: 
        Comment: !Sub ${DomainName} created by ${AWS::StackName}
      HostedZoneTags: 
        - Key: environment
          Value: !Ref Environment
        - Key: !Ref TagKey
          Value: !Ref TagValue
      Name: !Ref DomainName
  # VPC Endpoint
  SSMEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties: 
      PrivateDnsEnabled: true
      SecurityGroupIds: 
        - !Ref SecurityGroupForEndpoint
      ServiceName: !Sub com.amazonaws.${AWS::Region}.ssm
      SubnetIds: 
        - !GetAtt Az1.Outputs.PrivateSubnetId
        - !GetAtt Az2.Outputs.PrivateSubnetId
        - !GetAtt Az3.Outputs.PrivateSubnetId
      VpcEndpointType: Interface
      VpcId: !Ref VPC
  SSMMessagesEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties: 
      PrivateDnsEnabled: true
      SecurityGroupIds: 
        - !Ref SecurityGroupForEndpoint
      ServiceName: !Sub com.amazonaws.${AWS::Region}.ssmmessages
      SubnetIds: 
        - !GetAtt Az1.Outputs.PrivateSubnetId
        - !GetAtt Az2.Outputs.PrivateSubnetId
        - !GetAtt Az3.Outputs.PrivateSubnetId
      VpcEndpointType: Interface
      VpcId: !Ref VPC
  EC2MessagesEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PrivateDnsEnabled: true
      SecurityGroupIds: 
        - !Ref SecurityGroupForEndpoint
      ServiceName: !Sub com.amazonaws.${AWS::Region}.ec2messages
      SubnetIds: 
        - !GetAtt Az1.Outputs.PrivateSubnetId
        - !GetAtt Az2.Outputs.PrivateSubnetId
        - !GetAtt Az3.Outputs.PrivateSubnetId
      VpcEndpointType: Interface
      VpcId: !Ref VPC
  CloudWatchLogsEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PrivateDnsEnabled: true
      SecurityGroupIds: 
        - !Ref SecurityGroupForEndpoint
      ServiceName: !Sub com.amazonaws.${AWS::Region}.logs
      SubnetIds: 
        - !GetAtt Az1.Outputs.PrivateSubnetId
        - !GetAtt Az2.Outputs.PrivateSubnetId
        - !GetAtt Az3.Outputs.PrivateSubnetId
      VpcEndpointType: Interface
      VpcId: !Ref VPC
  FirehoseEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PrivateDnsEnabled: true
      SecurityGroupIds: 
        - !Ref SecurityGroupForEndpoint
      ServiceName: !Sub com.amazonaws.${AWS::Region}.kinesis-firehose
      SubnetIds: 
        - !GetAtt Az1.Outputs.PrivateSubnetId
        - !GetAtt Az2.Outputs.PrivateSubnetId
        - !GetAtt Az3.Outputs.PrivateSubnetId
      VpcEndpointType: Interface
      VpcId: !Ref VPC
  SecurityGroupForEndpoint:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupName: !Sub sgp-${AWS::StackName}-${AWS::Region}-vpce-20221129
      GroupDescription: Security Group for VPC Endpoints
      SecurityGroupEgress:
        - CidrIp: !Ref ActiveDirectorySubnetCidrBlockForAz1
          FromPort: 0
          ToPort: 0
          IpProtocol: '-1'
        - CidrIp: !Ref ActiveDirectorySubnetCidrBlockForAz2
          FromPort: 0
          ToPort: 0
          IpProtocol: '-1'
        - CidrIp: !Ref SubnetPrivateCidrBlockAz1
          FromPort: 0
          ToPort: 0
          IpProtocol: '-1'
        - CidrIp: !Ref SubnetPrivateCidrBlockAz2
          FromPort: 0
          ToPort: 0
          IpProtocol: '-1'
      SecurityGroupIngress:
        - CidrIp: !Ref ActiveDirectorySubnetCidrBlockForAz1
          Description: https
          FromPort: 443
          ToPort: 443
          IpProtocol: TCP
        - CidrIp: !Ref ActiveDirectorySubnetCidrBlockForAz2
          Description: https
          FromPort: 443
          ToPort: 443
          IpProtocol: TCP
        - CidrIp: !Ref SubnetPrivateCidrBlockAz1
          Description: https
          FromPort: 443
          ToPort: 443
          IpProtocol: TCP
        - CidrIp: !Ref SubnetPrivateCidrBlockAz2
          Description: https
          FromPort: 443
          ToPort: 443
          IpProtocol: TCP
      Tags:
        - Key: Name
          Value: !Sub sgp-${AWS::StackName}-${AWS::Region}-vpce
        - Key: environment
          Value: !Ref Environment
        - Key: !Ref TagKey
          Value: !Ref TagValue
      VpcId: !Ref VPC
  S3Endpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub com.amazonaws.${AWS::Region}.s3
      VpcEndpointType: Gateway
      VpcId: !Ref VPC
  # CloudWatch
  CloudWatchLogsGroupForVPCFlowLog:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/vpc/${AWS::StackName}
      RetentionInDays: 60
      Tags: 
        - Key: environment
          Value: !Ref Environment
        - Key: !Ref TagKey
          Value: !Ref TagValue
  CloudWatchAlarmTransitGatewayAttachment:
    Condition: CreateTransitGateway
    Type: AWS::Serverless::Application
    Properties:
      Location:
        ApplicationId: arn:aws:serverlessrepo:us-east-1:172664222583:applications/cloudwatch-alarm-about-transitgateway-attachment
        SemanticVersion: 2.2.2
      NotificationARNs: 
        - !If
          - CreateSNSForDeployment
          - !GetAtt SNSForDeployment.Outputs.SNSTopicArn
          - !Ref SNSForDeploymentArn
      Parameters:
        CustomAlarmName: !Ref AWS::StackName
        SNSTopicArn: !If 
          - CreateSNSForAlert
          - !GetAtt SNSForAlert.Outputs.SNSTopicArn
          - !Ref SNSForAlertArn
        TransitGatewayId: !Ref TransitGatewayId
        TransitGatewayAttachmentId: !Ref TransitGatewayAttachment
      Tags:
        environment: !Ref Environment
        createdby: !Ref TagValue
  CloudWatchAlarmSSMEndpoint:
    Type: AWS::Serverless::Application
    Properties:
      Location:
        ApplicationId: arn:aws:serverlessrepo:us-east-1:172664222583:applications/cloudwatch-alarm-about-privateendpoints
        SemanticVersion: 2.2.2
      NotificationARNs: 
        - !If
          - CreateSNSForDeployment
          - !GetAtt SNSForDeployment.Outputs.SNSTopicArn
          - !Ref SNSForDeploymentArn
      Parameters: 
        CustomAlarmName : !Sub ${AWS::StackName}
        EndpointType: Interface
        ServiceName: !Sub com.amazonaws.${AWS::Region}.ssm
        SNSTopicArn: !If 
          - CreateSNSForAlert
          - !GetAtt SNSForAlert.Outputs.SNSTopicArn
          - !Ref SNSForAlertArn
        VPCEndpointId: !Ref SSMEndpoint
        VPCId: !Ref VPC
      Tags:
        environment: !Ref Environment
        createdby: !Ref TagValue
  CloudWatchAlarmSSMMessagesEndpoint:
    Type: AWS::Serverless::Application
    Properties:
      Location:
        ApplicationId: arn:aws:serverlessrepo:us-east-1:172664222583:applications/cloudwatch-alarm-about-privateendpoints
        SemanticVersion: 2.2.2
      NotificationARNs: 
        - !If
          - CreateSNSForDeployment
          - !GetAtt SNSForDeployment.Outputs.SNSTopicArn
          - !Ref SNSForDeploymentArn
      Parameters: 
        CustomAlarmName : !Sub ${AWS::StackName}
        EndpointType: Interface
        ServiceName: !Sub com.amazonaws.${AWS::Region}.ssmmessages
        SNSTopicArn: !If 
          - CreateSNSForAlert
          - !GetAtt SNSForAlert.Outputs.SNSTopicArn
          - !Ref SNSForAlertArn
        VPCEndpointId: !Ref SSMMessagesEndpoint
        VPCId: !Ref VPC
      Tags:
        environment: !Ref Environment
        createdby: !Ref TagValue
  CloudWatchAlarmEC2MessagesEndpoint:
    Type: AWS::Serverless::Application
    Properties:
      Location:
        ApplicationId: arn:aws:serverlessrepo:us-east-1:172664222583:applications/cloudwatch-alarm-about-privateendpoints
        SemanticVersion: 2.2.2
      NotificationARNs: 
        - !If
          - CreateSNSForDeployment
          - !GetAtt SNSForDeployment.Outputs.SNSTopicArn
          - !Ref SNSForDeploymentArn
      Parameters: 
        CustomAlarmName : !Sub ${AWS::StackName}
        EndpointType: Interface
        ServiceName: !Sub com.amazonaws.${AWS::Region}.ec2messages
        SNSTopicArn: !If 
          - CreateSNSForAlert
          - !GetAtt SNSForAlert.Outputs.SNSTopicArn
          - !Ref SNSForAlertArn
        VPCEndpointId: !Ref EC2MessagesEndpoint
        VPCId: !Ref VPC
      Tags:
        environment: !Ref Environment
        createdby: !Ref TagValue
  CloudWatchAlarmCloudWatchLogsEndpoint:
    Type: AWS::Serverless::Application
    Properties:
      Location:
        ApplicationId: arn:aws:serverlessrepo:us-east-1:172664222583:applications/cloudwatch-alarm-about-privateendpoints
        SemanticVersion: 2.2.2
      NotificationARNs: 
        - !If
          - CreateSNSForDeployment
          - !GetAtt SNSForDeployment.Outputs.SNSTopicArn
          - !Ref SNSForDeploymentArn
      Parameters: 
        CustomAlarmName : !Sub ${AWS::StackName}
        EndpointType: Interface
        ServiceName: !Sub com.amazonaws.${AWS::Region}.logs
        SNSTopicArn: !If 
          - CreateSNSForAlert
          - !GetAtt SNSForAlert.Outputs.SNSTopicArn
          - !Ref SNSForAlertArn
        VPCEndpointId: !Ref CloudWatchLogsEndpoint
        VPCId: !Ref VPC
      Tags:
        environment: !Ref Environment
        createdby: !Ref TagValue
  CloudWatchAlarmFirehoseEndpoint:
    Type: AWS::Serverless::Application
    Properties:
      Location:
        ApplicationId: arn:aws:serverlessrepo:us-east-1:172664222583:applications/cloudwatch-alarm-about-privateendpoints
        SemanticVersion: 2.2.2
      NotificationARNs: 
        - !If
          - CreateSNSForDeployment
          - !GetAtt SNSForDeployment.Outputs.SNSTopicArn
          - !Ref SNSForDeploymentArn
      Parameters: 
        CustomAlarmName : !Sub ${AWS::StackName}
        EndpointType: Interface
        ServiceName: !Sub com.amazonaws.${AWS::Region}.kinesis-firehose
        SNSTopicArn: !If 
          - CreateSNSForAlert
          - !GetAtt SNSForAlert.Outputs.SNSTopicArn
          - !Ref SNSForAlertArn
        VPCEndpointId: !Ref FirehoseEndpoint
        VPCId: !Ref VPC
      Tags:
        environment: !Ref Environment
        createdby: !Ref TagValue

Outputs:
  ActiveDirectoryName:
    Description: The fully qualified domain name for the AWS Managed Microsoft AD directory
    Value: !Ref ActiveDirectoryName
  ActiveDirectoryShortName:
    Description: The NetBIOS name for your domain
    Value: !Ref ActiveDirectoryShortName
  ActiveDirectoryAdministrativeUserName:
    Description: The default administrative user name
    Value: Admin
  ActiveDirectoryDnsIpAddresses:
    Description: The IP addresses of the DNS servers for Active Directory
    Value: !GetAtt MicrosoftAD.Outputs.MicrosoftAdDnsIpAddresses
  ActiveDirectoryId:
    Description: The Id of the Active Directory
    Value: !GetAtt MicrosoftAD.Outputs.MicrosoftAdId