AWSTemplateFormatVersion: 2010-09-09
Description: AWSCloudFormationTemplates/cloudops/codeguru creates AWS CodeGuru Reviewer.

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: CodeGuru Configuration
        Parameters:
          - CodeGuruTargetRepository
      - Label:
          default: Tag Configuration
        Parameters:
          - Environment
          - TagKey
          - TagValue

Parameters:
  CodeGuruTargetRepository:
    Type: String
    Default: eijikominami/aws-cloudformation-templates
    Description: The GitHub owner name and repository name for AWS CodeGuru Reviewer [required]
  Environment:
    Type: String
    Default: production
    AllowedValues:
      - production
      - test
      - development
  TagKey:
    Type: String
    Default: createdby
    AllowedPattern: .+
  TagValue:
    Type: String
    Default: aws-cloudformation-templates
    AllowedPattern: .+

Resources:
  GitHub:
    Type: AWS::IAM::OIDCProvider
    Properties:
      ClientIdList: 
        - sts.amazonaws.com
      Tags: 
        - Key: !Ref TagKey
          Value: !Ref TagValue
      ThumbprintList: 
        - aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
      Url: token.actions.githubusercontent.com
  IAMRoleForGitHubActions:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Federated: !GetAtt GitHub.Arn
            Action: sts:AssumeRoleWithWebIdentity
            Condition:
              StringEquals:
                token.actions.githubusercontent.com:aud: sts.amazonaws.com
              StringLike:
                token.actions.githubusercontent.com:sub: !Sub repo:${CodeGuruTargetRepository}:*
      Description: A role required for GitHub Actions to access CodeGuru.
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonCodeGuruReviewerFullAccess
      Policies:  
        - PolicyName: S3
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:CreateBucket
                  - s3:GetBucket*
                  - s3:List*
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                Resource:
                  - !Sub arn:aws:s3:::${S3ForCodeGuruReviewer}
                  - !Sub arn:aws:s3:::${S3ForCodeGuruReviewer}/*
      RoleName: !Sub ${AWS::StackName}-GitHubActions-${AWS::Region}
      Tags:
        - Key: environment
          Value: !Ref Environment
        - Key: !Ref TagKey
          Value: !Ref TagValue
  S3ForCodeGuruReviewer:
    Type: AWS::S3::Bucket
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration: 
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      BucketName: !Sub codeguru-reviewer-${AWS::Region}-${AWS::AccountId}
      LifecycleConfiguration:
        Rules:
          - Id: ExpirationInDays
            ExpirationInDays: 7
            Status: Enabled
      PublicAccessBlockConfiguration: 
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      Tags:
        - Key: environment
          Value: !Ref Environment
        - Key: !Ref TagKey
          Value: !Ref TagValue
  S3BucketPolicyForS3ForCodeGuruReviewer:
    Type: AWS::S3::BucketPolicy
    Properties: 
      Bucket: !Ref S3ForCodeGuruReviewer
      PolicyDocument:
        Version: 2012-10-17
        Id: !Ref S3ForCodeGuruReviewer
        Statement:
          - Effect: Deny
            Principal: '*'
            Action: 's3:*'
            Resource: 
              - !GetAtt S3ForCodeGuruReviewer.Arn
              - !Join
                - ''
                - - !GetAtt S3ForCodeGuruReviewer.Arn
                  - /*
            Condition:
              Bool: 
                aws:SecureTransport: false
          - Sid: DenyPublicReadACL
            Effect: Deny
            Principal:
              AWS: '*'
            Action:
              - s3:PutObject
              - s3:PutObjectAcl
            Resource:
              - !Sub ${S3ForCodeGuruReviewer.Arn}
              - !Sub ${S3ForCodeGuruReviewer.Arn}/*
            Condition:
              StringEquals:
                s3:x-amz-acl:
                  - public-read
                  - public-read-write
                  - authenticated-read
          - Sid: DenyPublicReadGrant
            Effect: Deny
            Principal:
              AWS: '*'
            Action:
              - s3:PutObject
              - s3:PutObjectAcl
            Resource:
              - !Sub ${S3ForCodeGuruReviewer.Arn}
              - !Sub ${S3ForCodeGuruReviewer.Arn}/*
            Condition:
              StringEquals:
                s3:x-amz-grant-read:
                  - "*http://acs.amazonaws.com/groups/global/AllUsers*"
                  - "*http://acs.amazonaws.com/groups/global/AuthenticatedUsers*"
          - Sid: DenyPublicListACL
            Effect: Deny
            Principal:
              AWS: '*'
            Action: s3:PutBucketAcl
            Resource:
              - !Sub ${S3ForCodeGuruReviewer.Arn}
              - !Sub ${S3ForCodeGuruReviewer.Arn}/*
            Condition:
              StringEquals:
                s3:x-amz-acl:
                  - public-read
                  - public-read-write
                  - authenticated-read
          - Sid: DenyPublicListGrant
            Effect: Deny
            Principal:
              AWS: '*'
            Action: s3:PutBucketAcl
            Resource:
              - !Sub ${S3ForCodeGuruReviewer.Arn}
              - !Sub ${S3ForCodeGuruReviewer.Arn}/*
            Condition:
              StringEquals:
                s3:x-amz-grant-read:
                  - "*http://acs.amazonaws.com/groups/global/AllUsers*"
                  - "*http://acs.amazonaws.com/groups/global/AuthenticatedUsers*"
          - Sid: DenyInSecureRequest
            Effect: Deny
            Principal: '*'
            Action: s3:*
            Resource:
              - !Sub ${S3ForCodeGuruReviewer.Arn}
              - !Sub ${S3ForCodeGuruReviewer.Arn}/*
            Condition:
              Bool:
                aws:SecureTransport: 'false'
          - Sid: AllowS3WriteAccess
            Effect: Allow
            Principal:
              AWS: !Sub arn:aws:iam::${AWS::AccountId}:root
            Action: s3:PutObject
            Resource:
              - !Sub ${S3ForCodeGuruReviewer.Arn}/*
          - Sid: DenyS3ReadAccess
            Effect: Deny
            Principal: '*'
            Action: s3:GetObject
            Resource:
              - !Sub ${S3ForCodeGuruReviewer.Arn}/*
            Condition:
              StringNotLike:
                aws:PrincipalArn: !Sub arn:aws:iam::${AWS::AccountId}:role/aws-service-role/codeguru-reviewer.amazonaws.com/AWSServiceRoleForAmazonCodeGuruReviewer
