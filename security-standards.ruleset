# AWS CloudFormation Guard Rules.
# https://github.com/aws-cloudformation/cloudformation-guard
#
# CIS AWS Foundations Benchmark controls
# AWS Foundational Security Best Practices controls

let cloudtrail_trail = Resources.*[ Type == 'AWS::CloudTrail::Trail' ]
rule cloudtrail_trail_checks when %cloudtrail_trail !empty {
    %cloudtrail_trail.Properties {
        # [CIS 2.1] Ensure CloudTrail is enabled in all Regions 
        # [CloudTrail.1] CloudTrail should be enabled and configured with at least one multi-Region trail 
        IsMultiRegionTrail == true
        
        # [CIS 2.2] Ensure CloudTrail log file validation is enabled
        IsLogging == true
        EnableLogFileValidation == true

        # [CIS 2.4] Ensure CloudTrail trails are integrated with Amazon CloudWatch Logs
        CloudWatchLogsLogGroupArn exists

        # [CloudTrail.2] CloudTrail should have encryption at-rest enabled 
        KMSKeyId exists
    }
}

let dms_replication_instance = Resources.*[ Type == 'AWS::DMS::ReplicationInstance' ]
rule dms_replication_instance_checks when %dms_replication_instance !empty {
    %dms_replication_instance.Properties {
        # [DMS.1] Database Migration Service replication instances should not be public 
        PubliclyAccessible == 'false'
    }
}

let ec2_volume = Resources.*[ Type == 'AWS::EC2::Volume' ]
rule ec2_volume_checks when %ec2_volume !empty {
    %ec2_volume.Properties {
        # [EC2.3] Attached EBS volumes should be encrypted at-rest
        Encrypted == true
    }
}

let ec2_instance = Resources.*[ Type == 'AWS::EC2::Instance' ]
rule ec2_instance_checks when %ec2_instance !empty {
    %ec2_instance.Properties {
        # [EC2.3] Attached EBS volumes should be encrypted at-rest
        BlockDeviceMappings.*.Ebs.Encrypted == true
    }
}

let ec2_security_group = Resources.*[ Type == 'AWS::EC2::SecurityGroup' ]
rule ec2_security_group_checks when %ec2_security_group !empty {
    %ec2_security_group.Properties {
        when SecurityGroupIngress.*.ToPort == '22' {
            SecurityGroupIngress.*.CidrIp != '0.0.0.0/0'
        }
        when SecurityGroupIngress.*.ToPort == '3389' {
            SecurityGroupIngress.*.CidrIp != '0.0.0.0/0'
        }
    }
}

let elasticsearch_domain = Resources.*[ Type == 'AWS::Elasticsearch::Domain' ]
rule elasticsearch_domain_checks when %elasticsearch_domain !empty {
    %elasticsearch_domain.Properties {
        # [ES.1] Elasticsearch domains should have encryption at-rest enabled
        EncryptionAtRestOptions.Enabled == true
    }
}

let guardduty_detector = Resources.*[ Type == 'AWS::GuardDuty::Detector' ]
rule guardduty_detector_checks when %guardduty_detector !empty {
    %guardduty_detector.Properties {
        # [GuardDuty.1] GuardDuty should be enabled
        Enable == true
    }
}

let iam_role = Resources.*[ Type == 'AWS::IAM::Role' ]
rule iam_role_checks when %iam_role !empty {
    %iam_role.Properties {
        # [CIS 1.22] Ensure IAM policies that allow full "*:*" administrative privileges are not created 
        # [IAM.1] IAM policies should not allow full "*" administrative privileges
        when Policies.* is_list {
            Policies.*.PolicyDocument.Statement.*.Action.* != '\*'
        }
    }
}

let kms_key = Resources.*[ Type == 'AWS::KMS::Key' ]
rule kms_key_checks when %kms_key !empty {
    %kms_key.Properties {
        # [CIS 2.8] Ensure rotation for customer-created CMKs is enabled
        EnableKeyRotation == true
    }
}

let rds_dbinstance = Resources.*[ Type == 'AWS::RDS::DBInstance' ]
rule rds_dbinstance_checks when %rds_dbinstance !empty {
    %rds_dbinstance.Properties {
        # [RDS.2] RDS DB instances should prohibit public access, determined by the PubliclyAccessible configuration 
        PubliclyAccessible == 'false'

        # [RDS.3] RDS DB instances should have encryption at-rest enabled 
        StorageEncrypted == true
    }
}

let s3_bucket = Resources.*[ Type == 'AWS::S3::Bucket' ]
rule s3_bucket_checks when %s3_bucket !empty {
    %s3_bucket.Properties {
        # [S3.4] S3 buckets should have server-side encryption enabled
        BucketEncryption.ServerSideEncryptionConfiguration exists
    }
}

let sagemaker_notebook_instance = Resources.*[ Type == 'AWS::SageMaker::NotebookInstance' ]
rule sagemaker_notebook_instance when %sagemaker_notebook_instance !empty {
    %sagemaker_notebook_instance.Properties {
        # [SageMaker.1] SageMaker notebook instances should not have direct internet access 
        DirectInternetAccess == 'Disabled'
    }
}