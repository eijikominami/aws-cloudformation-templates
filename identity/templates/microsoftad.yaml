AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: AWSCloudFormationTemplates/security/microsoftad sets AWS Directory Service for Microsoft Active Directory.

Metadata: 
  AWS::CloudFormation::Interface:
    ParameterGroups: 
      - Label: 
          default: 'Microsoft Active Directory Configuration'
        Parameters: 
          - Edition
          - EnableSso
          - Name
          - Password
          - ShortName
          - SubnetPrivateCidrBlockForAz1
          - SubnetPrivateCidrBlockForAz2
          - VPCId
      - Label: 
          default: 'Management Instance Configuration'
        Parameters: 
          - EC2ImageId
      - Label: 
          default: 'Notification Configuration'
        Parameters: 
          - SNSForAlertArn
          - SNSForDeploymentArn
      - Label: 
          default: 'Tag Configuration'
        Parameters:
          - LogicalNamePrefix
          - Environment 
          - TagKey
          - TagValue

Parameters:
  EC2ImageId:
    Type: AWS::EC2::Image::Id
    Default: ami-099772c3838a3bec1
    AllowedPattern: ^ami-.+$
    Description: The EC2 Image Id [required]
  Edition:
    Type: String
    Default: Standard
    AllowedValues:
      - Enterprise
      - Standard
    Description: The edition of AWS Directory Service for Microsoft Active Directory [required]
  EnableSso:
    Type: String
    Default: true
    AllowedValues:
      - true
      - false
    Description: Whether to enable single sign-on for a Microsoft Active Directory in AWS [required]
  LogicalNamePrefix:
    Type: String
    Default: MicrosoftAD
    AllowedPattern: .+
    Description: The custom prefix name [required]
  Name:
    Type: String
    Default: corp.example.com
    AllowedPattern: ^([a-zA-Z0-9]+[\\.-])+([a-zA-Z0-9])+$
    Description: The fully qualified domain name for the AWS Managed Microsoft AD directory [required]
  Password:
    Type: String
    Default: Password1+
    AllowedPattern: (?=^.{8,64}$)((?=.*\d)(?=.*[A-Z])(?=.*[a-z])|(?=.*\d)(?=.*[^A-Za-z0-9\s])(?=.*[a-z])|(?=.*[^A-Za-z0-9\s])(?=.*[A-Z])(?=.*[a-z])|(?=.*\d)(?=.*[A-Z])(?=.*[^A-Za-z0-9\s]))^.*
    NoEcho: true
    Description: The password for the default administrative user named Admin [required]
  ShortName:
    Type: String
    Default: CORP
    AllowedPattern: ^[^\\/:*?"<>|.]+[^\\/:*?"<>|]*$
    Description: The NetBIOS name for your domain [required]
  SubnetPrivateCidrBlockForAz1:
    Type: String
    Default: 10.1.0.64/26
    AllowedPattern: ^[0-9./]*$
    Description: The private subnet CIDR block at AZ1 [required]
  SubnetPrivateCidrBlockForAz2:
    Type: String
    Default: 10.1.1.64/26
    AllowedPattern: ^[0-9./]*$
    Description: The private subnet CIDR block at AZ2 [required]
  VPCId:
    Type: AWS::EC2::VPC::Id
    AllowedPattern: .+
    Description: The VPC id [required]
  SNSForAlertArn:
    Type: String
    Default: ''   
  SNSForDeploymentArn:
    Type: String
    Default: ''
  Environment:
    Type: String
    Default: production
    AllowedValues:
      - production
      - test
      - development
  TagKey:
    Type: String
    Default: createdby
    AllowedPattern: .+
  TagValue:
    Type: String
    Default: aws-cloudformation-templates
    AllowedPattern: .+

Conditions:
  CreateSNSForAlert: !Equals [ !Ref SNSForAlertArn, '']
  CreateSNSForDeployment: !Equals [ !Ref SNSForDeploymentArn, '']

Resources:
  # Nested Stack
  Az1:
    Type: AWS::Serverless::Application
    Properties:
      Location:
        ApplicationId: arn:aws:serverlessrepo:us-east-1:172664222583:applications/availability-zone
        SemanticVersion: 2.0.55
      NotificationARNs:
        - !If
          - CreateSNSForDeployment
          - !GetAtt SNSForDeployment.Outputs.SNSTopicArn
          - !Ref SNSForDeploymentArn
      Parameters:
        AvailabilityZone: !Select 
          - 0
          - Fn::GetAZs: !Ref 'AWS::Region'
        LogicalNamePrefix: !Ref AWS::StackName
        SubnetPrivateCidrBlock: !Ref SubnetPrivateCidrBlockForAz1
        SNSForAlertArn: !If
          - CreateSNSForAlert
          - !GetAtt SNSForAlert.Outputs.SNSTopicArn
          - !Ref SNSForAlertArn
        SNSForDeploymentArn: !If
          - CreateSNSForDeployment
          - !GetAtt SNSForDeployment.Outputs.SNSTopicArn
          - !Ref SNSForDeploymentArn   
        VPCId: !Ref VPCId
        Environment: !Ref Environment
        TagKey: !Ref TagKey
        TagValue: !Ref TagValue
      Tags:
        environment: !Ref Environment
        createdby: !Ref TagValue
  Az2:
    Type: AWS::Serverless::Application
    Properties:
      Location:
        ApplicationId: arn:aws:serverlessrepo:us-east-1:172664222583:applications/availability-zone
        SemanticVersion: 2.0.55
      NotificationARNs:
        - !If
          - CreateSNSForDeployment
          - !GetAtt SNSForDeployment.Outputs.SNSTopicArn
          - !Ref SNSForDeploymentArn
      Parameters:
        AvailabilityZone: !Select
          - 1
          - Fn::GetAZs: !Ref 'AWS::Region'
        LogicalNamePrefix: !Ref AWS::StackName
        SubnetPrivateCidrBlock: !Ref SubnetPrivateCidrBlockForAz2
        SNSForAlertArn: !If
          - CreateSNSForAlert
          - !GetAtt SNSForAlert.Outputs.SNSTopicArn
          - !Ref SNSForAlertArn
        SNSForDeploymentArn: !If
          - CreateSNSForDeployment
          - !GetAtt SNSForDeployment.Outputs.SNSTopicArn
          - !Ref SNSForDeploymentArn 
        VPCId: !Ref VPCId
        Environment: !Ref Environment
        TagKey: !Ref TagKey
        TagValue: !Ref TagValue 
      Tags:
        environment: !Ref Environment
        createdby: !Ref TagValue
  SNSForAlert:
    Condition: CreateSNSForAlert
    Type: AWS::Serverless::Application
    Properties:
      Location:
        ApplicationId: arn:aws:serverlessrepo:us-east-1:172664222583:applications/sns-topic
        SemanticVersion: 2.0.55
      NotificationARNs:
        - !If
          - CreateSNSForDeployment
          - !GetAtt SNSForDeployment.Outputs.SNSTopicArn
          - !Ref SNSForDeploymentArn
      Parameters:
        TopicName: !Sub Alert-createdby-${AWS::StackName}
      Tags:
        environment: !Ref Environment
        createdby: !Ref TagValue
  SNSForDeployment:
    Condition: CreateSNSForDeployment
    Type: AWS::Serverless::Application
    Properties:
      Location:
        ApplicationId: arn:aws:serverlessrepo:us-east-1:172664222583:applications/sns-topic
        SemanticVersion: 2.0.55
      Parameters:
        TopicName: !Sub Deployment-createdby-${AWS::StackName}
      Tags:
        environment: !Ref Environment
        createdby: !Ref TagValue
  # IAM
  IAMRoleForManagementInstance:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      Description: A role required for Managed Instances.
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonSSMMaintenanceWindowRole
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
        # for Microsoft AD
        - arn:aws:iam::aws:policy/AmazonSSMDirectoryServiceAccess
      Policies:
        - PolicyName: S3
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource:
                  - !Sub 'arn:aws:s3:::aws-ssm-${AWS::Region}/*'
                  - !Sub 'arn:aws:s3:::aws-windows-downloads-${AWS::Region}/*'
                  - !Sub 'arn:aws:s3:::amazon-ssm-${AWS::Region}/*'
                  - !Sub 'arn:aws:s3:::amazon-ssm-packages-${AWS::Region}/*'
                  - !Sub 'arn:aws:s3:::${AWS::Region}-birdwatcher-prod/*'
                  - !Sub 'arn:aws:s3:::aws-ssm-distributor-file-${AWS::Region}/*'
                  - !Sub 'arn:aws:s3:::aws-ssm-document-attachments-${AWS::Region}/*'
                  - !Sub 'arn:aws:s3:::patch-baseline-snapshot-${AWS::Region}/*'
      RoleName: !Sub '${LogicalNamePrefix}-AWSEC2Role-${AWS::Region}'
      Tags:
        - Key: environment
          Value: !Ref Environment
        - Key: !Ref TagKey
          Value: !Ref TagValue
  IamInstanceProfileForIAMRoleForManagementInstance:
    Type: AWS::IAM::InstanceProfile
    Properties: 
      InstanceProfileName: !Ref IAMRoleForManagementInstance
      Roles: 
        - !Ref IAMRoleForManagementInstance
  # Active Directory
  ActiveDirectory:
    Type: AWS::DirectoryService::MicrosoftAD
    Properties: 
      CreateAlias: true
      Edition: !Ref Edition
      EnableSso: !Ref EnableSso
      Name: !Ref Name
      Password: !Ref Password
      ShortName: !Ref ShortName
      VpcSettings: 
          SubnetIds: 
            - !GetAtt Az1.Outputs.PrivateSubnetId
            - !GetAtt Az2.Outputs.PrivateSubnetId
          VpcId: !Ref VPCId
  DHCPOptions:
    Type: AWS::EC2::DHCPOptions
    Properties: 
      DomainName: !Ref Name
      DomainNameServers: 
        - AmazonProvidedDNS
      Tags: 
        - Key: Name
          Value: !Sub dopt-${AWS::StackName}-${AWS::Region}
        - Key: environment
          Value: !Ref Environment
        - Key: !Ref TagKey
          Value: !Ref TagValue
  DHCPOptionsAssociation:
    Type: AWS::EC2::VPCDHCPOptionsAssociation
    Properties: 
      DhcpOptionsId: !GetAtt DHCPOptions.DhcpOptionsId
      VpcId: !Ref VPCId
  # EC2
  ManagementInstance:
    Type: AWS::EC2::Instance
    Properties:
      BlockDeviceMappings: 
        - DeviceName: /dev/sda1
          Ebs: 
            DeleteOnTermination: true
            Encrypted: true
            VolumeSize: 30
            VolumeType: gp3
      EbsOptimized: true
      ImageId: !Ref EC2ImageId
      IamInstanceProfile: !Ref IamInstanceProfileForIAMRoleForManagementInstance
      InstanceInitiatedShutdownBehavior: stop
      InstanceType: t3.micro
      Monitoring: true
      SecurityGroupIds: 
        - !Ref SecurityGroupForManagementInstance
      SsmAssociations: 
        - AssociationParameters: 
            - Key: directoryId
              Value:
               - !Ref ActiveDirectory
            - Key: directoryName
              Value:
               - !Ref Name
            - Key: dnsIpAddresses
              Value: !GetAtt ActiveDirectory.DnsIpAddresses
          DocumentName: !Ref EC2DomainJoin
      SubnetId: !GetAtt Az1.Outputs.PrivateSubnetId
      Tags: 
        - Key: Name
          Value: !Sub ec2-${AWS::StackName}-${AWS::Region}
        - Key: environment
          Value: !Ref Environment
        - Key: !Ref TagKey
          Value: !Ref TagValue
  EC2DomainJoin:
    Type: AWS::SSM::Document
    Properties: 
      Content: 
        schemaVersion: '1.2'
        description: Join instances to an AWS Directory Service domain.
        parameters: 
          directoryId: 
            type: String
            description: (Required) The ID of the AWS Directory Service directory.
          directoryName: 
            type: String
            description: (Required) The name of the directory; for example, test.example.com
          dnsIpAddresses: 
            type: StringList
            description: (Optional) The IP addresses of the DNS servers in the directory. Required when DHCP is not configured. Learn more at http://docs.aws.amazon.com/directoryservice/latest/simple-ad/join_get_dns_addresses.html
        runtimeConfig: 
          aws:domainJoin: 
            properties: 
              directoryId: '{{ directoryId }}'
              directoryName: '{{ directoryName }}'
              dnsIpAddresses: '{{ dnsIpAddresses }}'
  SecurityGroupForManagementInstance:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupName: !Sub sgp-${AWS::StackName}-${AWS::Region}-mgmt
      GroupDescription: Security Group for a management instance
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          FromPort: 0
          ToPort: 0
          IpProtocol: '-1'
      Tags:
        - Key: Name
          Value: !Sub sgp-${AWS::StackName}-${AWS::Region}-mgmt
        - Key: environment
          Value: !Ref Environment
        - Key: !Ref TagKey
          Value: !Ref TagValue
      VpcId: !Ref VPCId
  SSMEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties: 
      PolicyDocument:
        Statement:
          Principal: '*'
          Action:
            - ssm:ListCommands
            - ssm:ListCommandInvocations
            - ssm:GetCommandInvocation
          Effect: Allow
          Resource: '*'
      PrivateDnsEnabled: true
      SecurityGroupIds: 
        - !Ref SecurityGroupForEndpoint
      ServiceName: !Sub com.amazonaws.${AWS::Region}.ssm
      SubnetIds: 
        - !GetAtt Az1.Outputs.PrivateSubnetId
        - !GetAtt Az2.Outputs.PrivateSubnetId
      VpcEndpointType: Interface
      VpcId: !Ref VPCId
  SSMMessagesEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties: 
      PolicyDocument:
        Statement:
          Principal: '*'
          Action:
            - ssm:ListCommands
            - ssm:ListCommandInvocations
            - ssm:GetCommandInvocation
          Effect: Allow
          Resource: '*'
      PrivateDnsEnabled: true
      SecurityGroupIds: 
        - !Ref SecurityGroupForEndpoint
      ServiceName: !Sub com.amazonaws.${AWS::Region}.ssmmessages
      SubnetIds: 
        - !GetAtt Az1.Outputs.PrivateSubnetId
        - !GetAtt Az2.Outputs.PrivateSubnetId
      VpcEndpointType: Interface
      VpcId: !Ref VPCId
  EC2MessagesEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PolicyDocument:
        Statement:
          Principal: '*'
          Action:
            - ssm:ListCommands
            - ssm:ListCommandInvocations
            - ssm:GetCommandInvocation
          Effect: Allow
          Resource: '*'
      PrivateDnsEnabled: true
      SecurityGroupIds: 
        - !Ref SecurityGroupForEndpoint
      ServiceName: !Sub com.amazonaws.${AWS::Region}.ec2messages
      SubnetIds: 
        - !GetAtt Az1.Outputs.PrivateSubnetId
        - !GetAtt Az2.Outputs.PrivateSubnetId
      VpcEndpointType: Interface
      VpcId: !Ref VPCId
  SecurityGroupForEndpoint:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupName: !Sub sgp-${AWS::StackName}-${AWS::Region}-vpce
      GroupDescription: Security Group for VPC Endpoints
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          FromPort: 0
          ToPort: 0
          IpProtocol: '-1'
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          FromPort: 0
          ToPort: 0
          IpProtocol: '-1'
      Tags:
        - Key: Name
          Value: !Sub sgp-${AWS::StackName}-${AWS::Region}-vpce
        - Key: environment
          Value: !Ref Environment
        - Key: !Ref TagKey
          Value: !Ref TagValue
      VpcId: !Ref VPCId