AWSTemplateFormatVersion: 2010-09-09
Description: AWSCloudFormationTemplates/security/auditmanager sets AWS Audit Manager.

Metadata: 
  AWS::CloudFormation::Interface:
    ParameterGroups: 
      - Label: 
          default: 'Tag Configuration'
        Parameters:
          - Environment
          - LogicalNamePrefix
          - TagKey
          - TagValue

Parameters:
  LogicalNamePrefix:
    Type: String
    Default: DefaultSecuritySettings
    AllowedPattern: .+
    Description: The custom prefix name [required]
  Environment:
    Type: String
    Default: production
    AllowedValues:
      - production
      - test
      - development
  TagKey:
    Type: String
    Default: createdby
    AllowedPattern: .+
  TagValue:
    Type: String
    Default: aws-cloudformation-templates
    AllowedPattern: .+

Resources:
  ServiceLinkedRoleForAuditManager:
    Type: AWS::IAM::ServiceLinkedRole
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
    Properties: 
      AWSServiceName: auditmanager.amazonaws.com
      Description: A service-linked role required for AWS Audit Manager to access your resources.
  IAMRoleForAuditOwner:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:  auditmanager.amazonaws.com
            Action: 'sts:AssumeRole'
      Description: A role required for Audit Manager to access related services.
      ManagedPolicyArns:
          - arn:aws:iam::aws:policy/AWSAuditManagerAdministratorAccess
      RoleName: !Sub '${LogicalNamePrefix}-AuditManagerAuditOwner-${AWS::Region}'
      Tags:
        - Key: environment
          Value: !Ref Environment
        - Key: !Ref TagKey
          Value: !Ref TagValue
  IAMRoleForLambda:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      Description: A role required for Lambda to access IAM and CloudWatch Logs.
      Policies:
        - PolicyName: AuditManager
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'auditmanager:RegisterAccount'
                  - 'auditmanager:DeregisterAccount'
                Resource:
                  - '*'
      RoleName: !Sub '${LogicalNamePrefix}-LambdaForAuditManager-${AWS::Region}'
      Tags:
        - Key: environment
          Value: !Ref Environment
        - Key: !Ref TagKey
          Value: !Ref TagValue
  AuditManagerRegister:
    Type: Custom::LambdaEnableAuditManager
    Version: 1.0
    Properties:
      ServiceToken: !GetAtt LambdauditManagerRegister.Arn
  LambdauditManagerRegister:
    Type: AWS::Lambda::Function
    Properties:
      Architectures:
        - arm64
      Code:
        ZipFile: |
          import json
          import boto3
          import cfnresponse

          def lambda_handler(event, context):
            try:
              client = boto3.client('auditmanager')
              if event['RequestType'] == 'Create':
                response_data = client.register_account()
              if event['RequestType'] == 'Delete':
                response_data = client.deregister_account()
              cfnresponse.send(event, context, cfnresponse.SUCCESS, response_data)
            except Exception as e:
              cfnresponse.send(event, context, cfnresponse.FAILED, {}) 
      Description: AuditManagerのレジスターです。
      FunctionName: auditManagerRegister
      Handler: index.lambda_handler
      MemorySize: 128
      Role: !GetAtt IAMRoleForLambda.Arn
      Runtime: python3.9
      Timeout: 60
  LambdauditManagerRegisterLogGroup:
    Type: AWS::Logs::LogGroup
    Properties: 
      LogGroupName: !Sub /aws/lambda/${LambdauditManagerRegister}
      RetentionInDays: 60
  AuditManagerAWSWellArchitectedFramework:
    DependsOn:
      - AuditManagerRegister
    Type: AWS::AuditManager::Assessment
    Properties: 
      AssessmentReportsDestination: 
        Destination: !Sub s3://${S3}
        DestinationType: S3
      AwsAccount: 
        Id: !Ref AWS::AccountId
      Description: !Sub AWS Well Architected Framework created by ${LogicalNamePrefix}
      FrameworkId: 21060514-60c0-3fbb-ad3b-0b4af6dcca7c
      Name: AWS-Well-Architected-Framework
      Roles: 
        - RoleArn: !GetAtt IAMRoleForAuditOwner.Arn
          RoleType: PROCESS_OWNER
      Scope: 
        AwsAccounts: 
          - Id: !Ref AWS::AccountId
        AwsServices: 
          - ServiceName: config
      Status: ACTIVE
      Tags: 
        - Key: environment
          Value: !Ref Environment
        - Key: !Ref TagKey
          Value: !Ref TagValue
  AuditManagerAWSFoundationalSecurityBestPractices:
    DependsOn:
      - AuditManagerRegister
    Type: AWS::AuditManager::Assessment
    Properties: 
      AssessmentReportsDestination: 
        Destination: !Sub s3://${S3}
        DestinationType: S3
      AwsAccount: 
        Id: !Ref AWS::AccountId
      Description: !Sub AWS Foundational Security Best Practices created by ${LogicalNamePrefix}
      FrameworkId: 7fdddac2-e71c-3b25-8588-4e6df98b38d5
      Name: AWS-Foundational-Security-Best-Practices
      Roles: 
        - RoleArn: !GetAtt IAMRoleForAuditOwner.Arn
          RoleType: PROCESS_OWNER
      Scope: 
        AwsAccounts: 
          - Id: !Ref AWS::AccountId
        AwsServices: 
          - ServiceName: securityhub
      Status: ACTIVE
      Tags: 
        - Key: environment
          Value: !Ref Environment
        - Key: !Ref TagKey
          Value: !Ref TagValue
  AuditManagerAWSOperationalBestPractices:
    DependsOn:
      - AuditManagerRegister
    Type: AWS::AuditManager::Assessment
    Properties: 
      AssessmentReportsDestination: 
        Destination: !Sub s3://${S3}
        DestinationType: S3
      AwsAccount: 
        Id: !Ref AWS::AccountId
      Description: !Sub AWS Operational Best Practices created by ${LogicalNamePrefix}
      FrameworkId: 067999dd-6933-3707-96c8-e4bce8f1a60b
      Name: AWS-Operational-Best-Practices 
      Roles: 
        - RoleArn: !GetAtt IAMRoleForAuditOwner.Arn
          RoleType: PROCESS_OWNER
      Scope: 
        AwsAccounts: 
          - Id: !Ref AWS::AccountId
        AwsServices: 
          - ServiceName: securityhub
      Status: ACTIVE
      Tags: 
        - Key: environment
          Value: !Ref Environment
        - Key: !Ref TagKey
          Value: !Ref TagValue
  AuditManagerCISBenchmark:
    DependsOn:
      - AuditManagerRegister
    Type: AWS::AuditManager::Assessment
    Properties: 
      AssessmentReportsDestination: 
        Destination: !Sub s3://${S3}
        DestinationType: S3
      AwsAccount: 
        Id: !Ref AWS::AccountId
      Description: !Sub CIS Benchmark created by ${LogicalNamePrefix}
      FrameworkId: 067999dd-6933-3707-96c8-e4bce8f1a60b
      Name: CIS-Benchmark 
      Roles: 
        - RoleArn: !GetAtt IAMRoleForAuditOwner.Arn
          RoleType: PROCESS_OWNER
      Scope: 
        AwsAccounts: 
          - Id: !Ref AWS::AccountId
        AwsServices: 
          - ServiceName: securityhub
          - ServiceName: iam
          - ServiceName: config
          - ServiceName: cloudtrail
          - ServiceName: ec2
          - ServiceName: cloudwatch
      Status: ACTIVE
      Tags: 
        - Key: environment
          Value: !Ref Environment
        - Key: !Ref TagKey
          Value: !Ref TagValue
  S3:
    Type: AWS::S3::Bucket
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration: 
          - ServerSideEncryptionByDefault: 
              SSEAlgorithm: AES256
      BucketName: !Sub defaultsecuritysettings-auditmgr-${AWS::Region}-${AWS::AccountId}
      LifecycleConfiguration:
        Rules:
          - Id: ExpirationInDays
            ExpirationInDays: 60
            Status: Enabled
      PublicAccessBlockConfiguration: 
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      Tags:
        - Key: environment
          Value: !Ref Environment
        - Key: !Ref TagKey
          Value: !Ref TagValue
  S3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties: 
      Bucket: !Ref S3
      PolicyDocument:
        Version: 2012-10-17
        Id: !Ref S3
        Statement:
          - Effect: Deny
            Principal: '*'
            Action: 's3:*'
            Resource: 
              - !GetAtt S3.Arn
              - !Join
                - ''
                - - !GetAtt S3.Arn
                  - /*
            Condition:
              Bool: 
                aws:SecureTransport: false