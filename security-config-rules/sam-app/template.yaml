AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: AWSCloudFormationTemplates/security-config-rules sets extended Config rules.

Globals:
  Function:
    Architectures:
      - arm64
    Handler: lambda_function.lambda_handler
    Runtime: python3.9
    Tracing: Active

Metadata: 
  AWS::CloudFormation::Interface:
    ParameterGroups: 
      - Label: 
          default: 'Lambda Configuration'
        Parameters:
          - AWSConfigAutoRemediation
          - RequiredTagKey
          - RequiredTagValue
      - Label: 
          default: 'Notification Configuration'
        Parameters:
          - SNSForAlertArn
          - SNSForDeploymentArn
      - Label: 
          default: 'Tag Configuration'
        Parameters:
          - Environment
          - TagKey
          - TagValue

Parameters:
  AWSConfigAutoRemediation:
    Type: String
    Default: DISABLED
    AllowedValues:
      - ENABLED
      - DISABLED
    Description: Enable or disable auto remendentions [required]
  RequiredTagKey:
    Type: String
    Default: ''
    Description: Required tag key
  RequiredTagValue:
    Type: String
    Default: ''
    Description: Required tag key
  SNSForAlertArn:
    Type: String
    Default: ''
    Description: Amazon SNS Topic ARN for alert
  SNSForDeploymentArn:
    Type: String
    Default: '' 
    Description: Amazon SNS Topic ARN for deployment information
  Environment:
    Type: String
    Default: production
    AllowedValues:
      - production
      - test
      - development
  TagKey:
    Type: String
    Default: createdby
    AllowedPattern: .+
  TagValue:
    Type: String
    Default: aws-cloudformation-templates
    AllowedPattern: .+
    
Conditions:
  CreateConfigRules: !Or [ !Not [ !Equals [ !Ref RequiredTagKey, '' ] ], !Not [ !Equals [ !Ref RequiredTagValue, '' ] ] ]
  CreateRemediationResources: !Equals [ !Ref AWSConfigAutoRemediation, ENABLED ]
  CreateSNSForAlert: !Equals [ !Ref SNSForAlertArn, '']
  CreateSNSForDeployment: !Equals [ !Ref SNSForDeploymentArn, '']
  Development: !Equals [ !Ref Environment, development]

Resources:
  # Nested Stack
  SNSForAlert:
    Condition: CreateSNSForAlert
    Type: AWS::Serverless::Application
    Properties:
      Location:
        ApplicationId: arn:aws:serverlessrepo:us-east-1:172664222583:applications/sns-topic
        SemanticVersion: 2.1.11
      NotificationARNs:
        - !If
          - CreateSNSForDeployment
          - !GetAtt SNSForDeployment.Outputs.SNSTopicArn
          - !Ref SNSForDeploymentArn
      Parameters:
        TopicName: !Sub Alert-createdby-${AWS::StackName}
      Tags:
        environment: !Ref Environment
        createdby: !Ref TagValue
  SNSForDeployment:
    Condition: CreateSNSForDeployment
    Type: AWS::Serverless::Application
    Properties:
      Location:
        ApplicationId: arn:aws:serverlessrepo:us-east-1:172664222583:applications/sns-topic
        SemanticVersion: 2.1.11
      Parameters:
        TopicName: !Sub Deployment-createdby-${AWS::StackName}
      Tags:
        environment: !Ref Environment
        createdby: !Ref TagValue
  # IAM
  IAMRoleForLambda:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Description: A role required for Lambda to access API Gateway, CloudFront, Lambda and Config.
      ManagedPolicyArns:
          - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
          - arn:aws:iam::aws:policy/service-role/AWSConfigRulesExecutionRole
      Policies:
        - PolicyName: CloudWatchLambdaInsightsExecutionRolePolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:log-group:/aws/lambda-insights:*
        - PolicyName: CustomPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - apigateway:GET
                  - cloudfront:ListTagsForResource
                  - iam:GetRole
                  - lambda:ListTags
                  - 'config:*'
                Resource:
                  - '*'
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:ListObjects
                  - s3:DeleteObject
                  - s3:DeleteBucket
                  - dynamodb:deletetable
                  - apigateway:DELETE
                  - iam:ListRoles
                  - lambda:DeleteFunction
                Resource:
                  - '*'
        - PolicyName: CloudWatchLogs
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                Resource: '*'
              - Effect: Allow
                Action:
                  - logs:PutLogEvents
                Resource: '*' 
      RoleName: !Sub ${AWS::StackName}-Lambda-${AWS::Region}
      Tags:
        - Key: environment
          Value: !Ref Environment
        - Key: !Ref TagKey
          Value: !Ref TagValue
  ConfigRequiredTags:
    Condition: CreateConfigRules
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: required-tags
      Description: 指定したタグがリソースにあるかどうかを確認します。
      InputParameters:
        tag1Key: !Ref RequiredTagKey
        tag1Value: !Ref RequiredTagValue
      Source:
        Owner: AWS
        SourceIdentifier: REQUIRED_TAGS
  ConfigRequiredTagsExpanded:
    Condition: CreateConfigRules
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: required-tags-expanded
      Description: API Gateway と Lambda が指定したタグがリソースにあるかどうかを確認します。
      InputParameters:
        tagKey: !Ref RequiredTagKey
        tagValue: !Ref RequiredTagValue
      Source:
        Owner: CUSTOM_LAMBDA
        SourceDetails:
          - EventSource: aws.config
            MessageType: ConfigurationItemChangeNotification
        SourceIdentifier: !GetAtt LambdaCheckRequiredTags.Arn
  LambdaCheckRequiredTags:
    DependsOn:
      - LambdaCheckRequiredTagsLogGroup
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: checkRequiredTags/
      Description: 指定したタグがリソースにあるかどうかを確認します。
      FunctionName: checkRequiredTags
      Layers: !If
        - Development
        - - !Sub arn:aws:lambda:${AWS::Region}:157417159150:layer:AWSCodeGuruProfilerPythonAgentLambdaLayer:11
          - !Sub arn:aws:lambda:${AWS::Region}:580247275435:layer:LambdaInsightsExtension-Arm64:11
        - !Ref AWS::NoValue
      MemorySize: 128
      Role: !GetAtt IAMRoleForLambda.Arn
      Timeout: 30
      Tags:
        environment: !Ref Environment
        createdby: !Ref RequiredTagValue
  LambdaCheckRequiredTagsPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref LambdaCheckRequiredTags
      Principal: config.amazonaws.com
  LambdaCheckRequiredTagsLogGroup:
    Type: AWS::Logs::LogGroup
    Properties: 
      LogGroupName: /aws/lambda/checkRequiredTags
      RetentionInDays: 60
      Tags: 
        - Key: environment
          Value: !Ref Environment
        - Key: !Ref TagKey
          Value: !Ref TagValue
  CloudWatchEventsForConfigRequiredTags:
    Type: AWS::Events::Rule
    Properties: 
      Description: !Sub Rule for Config Required Tags created by ${AWS::StackName}.
      EventPattern:
        source:
          - aws.config
        detail-type: 
          - Config Rules Compliance Change
        # Events fired when status has been changed from PASSED to ARCHIVED.
        detail:
          messageType:
            - ComplianceChangeNotification
          newEvaluationResult:
            complianceType:
              - NON_COMPLIANT
      Name: AWS_Config_Custom_Rules
      State: !If
       - CreateRemediationResources
       - ENABLED
       - DISABLED
      Targets:
        - Arn: !GetAtt LambdaDeleteUnapplicableResources.Arn
          Id: lambda
  AlarmEventsForConfigRequiredTags:
    Type: AWS::Serverless::Application
    Properties:
      Location:
        ApplicationId: arn:aws:serverlessrepo:us-east-1:172664222583:applications/cloudwatch-alarm-about-events
        SemanticVersion: 2.1.11
      NotificationARNs:
        - !If
          - CreateSNSForDeployment
          - !GetAtt SNSForDeployment.Outputs.SNSTopicArn
          - !Ref SNSForDeploymentArn
      Parameters:
        CustomAlarmName: !Ref AWS::StackName
        SNSTopicArn: !If
          - CreateSNSForAlert
          - !GetAtt SNSForAlert.Outputs.SNSTopicArn
          - !Ref SNSForAlertArn
        EventsRuleName: !Ref CloudWatchEventsForConfigRequiredTags
      Tags:
        environment: !Ref Environment
        createdby: !Ref TagValue
  LambdaDeleteUnapplicableResources:
    DependsOn:
      - LambdaDeleteUnapplicableResourcesLogGroup
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: deleteUnapplicableResources/
      Description: 指定したタグがないリソースを削除します。
      FunctionName: deleteUnapplicableResources
      Layers: !If
        - Development
        - - !Sub arn:aws:lambda:${AWS::Region}:157417159150:layer:AWSCodeGuruProfilerPythonAgentLambdaLayer:11
          - !Sub arn:aws:lambda:${AWS::Region}:580247275435:layer:LambdaInsightsExtension-Arm64:11
        - !Ref AWS::NoValue
      MemorySize: 128
      Role: !GetAtt IAMRoleForLambda.Arn
      Timeout: 30
      Tags:
        environment: !Ref Environment
        createdby: !Ref RequiredTagValue
  LambdaDeleteUnapplicableResourcesPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref LambdaDeleteUnapplicableResources
      Principal: events.amazonaws.com
      SourceArn: !GetAtt CloudWatchEventsForConfigRequiredTags.Arn
  LambdaDeleteUnapplicableResourcesLogGroup:
    Type: AWS::Logs::LogGroup
    Properties: 
      LogGroupName: /aws/lambda/deleteUnapplicableResources
      RetentionInDays: 60
      Tags: 
        - Key: environment
          Value: !Ref Environment
        - Key: !Ref TagKey
          Value: !Ref TagValue