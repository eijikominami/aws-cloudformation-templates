AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: AWSCloudFormationTemplates/media/mediastore sets Elemental MediaStore.

Metadata: 
  AWS::CloudFormation::Interface:
    ParameterGroups: 
      - Label: 
          default: 'MediaStore Configuration'
        Parameters: 
          - ExpirationDate
          - MaxAgeSeconds
          - UserAgent
      - Label: 
          default: 'Notification Configuration'
        Parameters: 
          - SNSForAlertArn
          - SNSForDeploymentArn
      - Label: 
          default: 'Tag Configuration'
        Parameters: 
          - LogicalNamePrefix
          - Environment
          - TagKey
          - TagValue

Parameters:
  ExpirationDate:
    Type: Number
    Default: 1
    MinValue: 1
    MaxValue: 36500
    Description: The date objects to expire [required]
  MaxAgeSeconds:
    Type: Number
    Default: 30000
    Description: The time in seconds that browser caches the preflight response [required]
  UserAgent:
    Type: String
    Default: ''
    Description: The secret key that 'User-Agent' header contains
  LogicalNamePrefix:
    Type: String
    Default: MediaStore
    AllowedPattern: .+
    Description: The custom prefix name [required]
  SNSForAlertArn:
    Type: String
    Default: '' 
  SNSForDeploymentArn:
    Type: String
    Default: ''
  Environment:
    Type: String
    Default: production
    AllowedValues:
      - production
      - test
      - development
  TagKey:
    Type: String
    Default: createdby
    AllowedPattern: .+
  TagValue:
    Type: String
    Default: aws-cloudformation-templates 
    AllowedPattern: .+

Conditions:
  UserAgentExists: !Not [ !Equals [ !Ref UserAgent, ''] ]
  CreateSNSForAlert: !Equals [ !Ref SNSForAlertArn, '']
  CreateSNSForDeployment: !Equals [ !Ref SNSForDeploymentArn, '']

Resources:
  # Nested Stack
  SNSForAlert:
    Condition: CreateSNSForAlert
    Type: AWS::Serverless::Application
    Properties:
      Location:
        ApplicationId: arn:aws:serverlessrepo:us-east-1:172664222583:applications/sns-topic
        SemanticVersion: 2.1.16
      NotificationARNs:
        - !If
          - CreateSNSForDeployment
          - !GetAtt SNSForDeployment.Outputs.SNSTopicArn
          - !Ref SNSForDeploymentArn
      Parameters:
        TopicName: !Sub Alert-createdby-${AWS::StackName}
      Tags:
        environment: !Ref Environment
        createdby: !Ref TagValue
  SNSForDeployment:
    Condition: CreateSNSForDeployment
    Type: AWS::Serverless::Application
    Properties:
      Location:
        ApplicationId: arn:aws:serverlessrepo:us-east-1:172664222583:applications/sns-topic
        SemanticVersion: 2.1.16
      Parameters:
        TopicName: !Sub Deployment-createdby-${AWS::StackName}
      Tags:
        environment: !Ref Environment
        createdby: !Ref TagValue
  MediaStore:
    Type: AWS::MediaStore::Container
    Properties: 
      AccessLoggingEnabled: true
      ContainerName: !Ref LogicalNamePrefix
      CorsPolicy: 
        - AllowedHeaders: 
            - '*'
          AllowedMethods: 
            - GET
            - HEAD
          AllowedOrigins: 
            - '*'
          MaxAgeSeconds: !Ref MaxAgeSeconds
      LifecyclePolicy:
        !Sub
          - '{
                "rules": [
                    {
                        "definition": {
                            "path": [
                                {"wildcard": "*"}
                            ],
                            "days_since_create": [
                                {"numeric": [ ">", ${ExpirationDate} ]}
                            ]
                        },
                        "action": "EXPIRE"
                    }
                ]
            }'
          - ExpirationDate: !Ref ExpirationDate
      MetricPolicy: 
        ContainerLevelMetrics: ENABLED
      Policy: !Join
        - '' 
        - - !Sub '{
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Sid": "MediaStoreFullAccess",
                  "Action": [ "mediastore:*" ],
                  "Principal":{
                      "AWS" : "arn:aws:iam::${AWS::AccountId}:root"},
                  "Effect": "Allow",
                  "Resource": "arn:aws:mediastore:${AWS::Region}:${AWS::AccountId}:container/${LogicalNamePrefix}/*",
                  "Condition": {
                    "Bool": { "aws:SecureTransport": "true" }
                  }
                },
                {
                  "Sid": "PublicReadOverHttps",
                  "Effect": "Allow",
                  "Principal": "*",
                  "Action": [
                    "mediastore:GetObject",
                    "mediastore:DescribeObject"
                  ],
                  "Resource": "arn:aws:mediastore:${AWS::Region}:${AWS::AccountId}:container/${LogicalNamePrefix}/*",
                  "Condition": {'
          - !If
            - UserAgentExists
            - !Sub ' 
                    "StringEquals": {
                      "aws:UserAgent": "${UserAgent}"
                    },'
            - ''
          - '
                  "Bool": {
                      "aws:SecureTransport": "true"
                    }
                  }
                }
              ]
            }'
      Tags: 
        - Key: environment
          Value: !Ref Environment
        - Key: !Ref TagKey
          Value: !Ref TagValue
  CloudWatchAlarmMediaStore:
    Type: AWS::Serverless::Application
    Properties:
      Location:
        ApplicationId: arn:aws:serverlessrepo:us-east-1:172664222583:applications/cloudwatch-alarm-about-mediastore
        SemanticVersion: 2.1.16
      Parameters:
        CustomAlarmName: !Ref AWS::StackName
        ContainerName: !Ref MediaStore
        SNSTopicArn: !If
          - CreateSNSForAlert
          - !GetAtt SNSForAlert.Outputs.SNSTopicArn
          - !Ref SNSForAlertArn
      NotificationARNs: 
        - !If
          - CreateSNSForDeployment
          - !GetAtt SNSForDeployment.Outputs.SNSTopicArn
          - !Ref SNSForDeploymentArn
      Tags:
        environment: !Ref Environment
        createdby: !Ref TagValue

Outputs:
  Endpoint:
    Description: Endpoint
    Value: !GetAtt MediaStore.Endpoint