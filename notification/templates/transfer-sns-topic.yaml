AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: aws-cloudformation-templates/transfer-sns-topic creates resources for cross-region SNS topic message forwarding

Parameters:
  AlarmLevel:
    Type: String
    Default: NOTICE
    AllowedValues:
      - NOTICE
      - WARNING
    Description: The alarm level of CloudWatch alarms
  SourceSNSArn:
    Type: String
    AllowedPattern: ^arn:aws[a-z\-]*:sns:[a-z0-9\-]+:\d{12}:.*
    Description: The ARN of the source SNS topic that messages will be forwarded from
  DestinationSNSArn:
    Type: String
    AllowedPattern: ^arn:aws[a-z\-]*:sns:[a-z0-9\-]+:\d{12}:.*
    Description: The ARN of the destination SNS topic that messages will be forwarded to
  TagKey:
    Type: String
    Default: createdby
    AllowedPattern: .+
  TagValue:
    Type: String
    Default: aws-cloudformation-templates
    AllowedPattern: .+
  Environment:
    Type: String
    Default: production
    AllowedValues:
      - production
      - test
      - development

Conditions:
  Development: !Equals [ !Ref Environment, 'development' ]

Resources:
  # IAM
  IAMRoleForLambda:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Description: A role required for Lambda to access SNS and CloudWatch Logs.
      ManagedPolicyArns:
          - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
          - arn:aws:iam::aws:policy/CloudWatchLambdaInsightsExecutionRolePolicy
          - arn:aws:iam::aws:policy/AmazonCodeGuruProfilerAgentAccess
      Policies:
        - PolicyName: SNS
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - sns:publish
                Resource:
                  - !Ref SourceSNSArn
        - PolicyName: CloudWatchLogs
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                Resource: '*'
              - Effect: Allow
                Action:
                  - logs:PutLogEvents
                Resource: '*' 
      RoleName: !Sub ${AWS::StackName}-LambdaForGlobal-${AWS::Region}
      Tags:
        - Key: environment
          Value: !Ref Environment
        - Key: !Ref TagKey
          Value: !Ref TagValue
  # Lambda
  LambdaTransferSNSTopic:
    DependsOn:
      - LambdaTransferSNSTopicLogGroup
    Type: AWS::Lambda::Function
    Properties:
      Architectures:
        - arm64
      Code:
        ZipFile: !Sub |
          import boto3

          def lambda_handler(event, context):

            sns_topic_arn = '${SourceSNSArn}'
            sns = boto3.client('sns',region_name=sns_topic_arn.split(':')[3])
            
            for record in event['Records']:
              if record['Sns']['Subject'] is None:
                  request = {
                    'TopicArn': '${SourceSNSArn}',
                    'Message': record['Sns']['Message']
                  }
              else:
                  request = {
                      'TopicArn': '${SourceSNSArn}',
                      'Message': record['Sns']['Message'],
                      'Subject': record['Sns']['Subject']
                  }  
              sns.publish(**request)
      Description: SNSトピックを転送します。
      Environment:
        Variables:
          AWS_LAMBDA_EXEC_WRAPPER:  !If
            - Development
            - /opt/codeguru_profiler_lambda_exec
            - !Ref AWS::NoValue
          AWS_CODEGURU_PROFILER_TARGET_REGION: !If
            - Development
            - !Ref AWS::Region
            - !Ref AWS::NoValue
      FunctionName: transferSNSTopic
      Handler: index.lambda_handler
      Layers:
        - !Sub arn:aws:lambda:${AWS::Region}:157417159150:layer:AWSCodeGuruProfilerPythonAgentLambdaLayer:11
      MemorySize: 128
      Role: !GetAtt IAMRoleForLambda.Arn
      Runtime: python3.13
      Tags:
        - Key: environment
          Value: !Ref Environment
        - Key: !Ref TagKey
          Value: !Ref TagValue
      Timeout: 3
      TracingConfig:
        Mode: Active
  LambdaTransferSNSTopicPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref LambdaTransferSNSTopic
      Principal: sns.amazonaws.com
      # DO NOT write 'SourceAccount' option.
      SourceArn: !Ref DestinationSNSArn
  LambdaTransferSNSTopicLogGroup:
    Type: AWS::Logs::LogGroup
    Properties: 
      LogGroupName: /aws/lambda/transferSNSTopic
      RetentionInDays: 60
      Tags: 
        - Key: environment
          Value: !Ref Environment
        - Key: !Ref TagKey
          Value: !Ref TagValue
  # SNS
  SNSSubscription:
    Type: AWS::SNS::Subscription
    Properties: 
      Endpoint: !GetAtt LambdaTransferSNSTopic.Arn
      Protocol: lambda
      TopicArn: !Ref DestinationSNSArn
  SNSTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      Topics: 
        - !Ref DestinationSNSArn
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: AWSAnomalyDetectionSNSPublishingPermissions
            Effect: Allow
            Principal:
              Service: costalerts.amazonaws.com
            Resource: !Ref DestinationSNSArn
            Action: 'sns:Publish'
          - Sid: AWSBudgetsSNSPublishingPermissions
            Effect: Allow
            Principal:
              Service: budgets.amazonaws.com
            Resource: !Ref DestinationSNSArn
            Action: 'sns:Publish'
            Condition:
              StringEquals:
                aws:SourceAccount: !Ref AWS::AccountId
              ArnLike:
                aws:SourceArn: !Sub arn:aws:budgets::${AWS::AccountId}:*
  # CloudWatch Alarm for Lambda
  AlarmLambdaTransferSNSTopic:
    Type: AWS::Serverless::Application
    Properties:
      Location:
        ApplicationId: arn:aws:serverlessrepo:us-east-1:172664222583:applications/cloudwatch-alarm-about-lambda
        SemanticVersion: 2.2.13
      Parameters:
        AlarmLevel: !Ref AlarmLevel
        CustomAlarmName: !Ref AWS::StackName
        SNSTopicArn: !Ref DestinationSNSArn
        MetricFilterPattern: ''
        FunctionResouceName: !Ref LambdaTransferSNSTopic
        Environment: !Ref Environment
        TagKey: !Ref TagKey
        TagValue: !Ref TagValue
      Tags:
        environment: !Ref Environment
        createdby: !Ref TagValue