AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: AWSCloudFormationTemplates/notification sends notifications to Slack.

Globals:
  Function:
    Handler: lambda_function.lambda_handler
    Layers:
      # NOTE: AWS Lambda Extensions for Lambda Insights
      - !Sub arn:aws:lambda:${AWS::Region}:580247275435:layer:LambdaInsightsExtension:2
    Runtime: python3.9
    Tracing: Active

Metadata: 
  AWS::CloudFormation::Interface:
    ParameterGroups: 
      - Label: 
          default: 'EventBridge Configuration'
        Parameters:
          - AutoScalingEventsRule
          - EBSEventsRule
          - EC2EventsRule
          - KMSEventsRule
          - ManagementConsoleEventsRule
          - ScheduledEventsRule
          - TagEventsRule
          - TrustedAdvisorEventsRule
      - Label: 
          default: 'Slack Configuration'
        Parameters:
          - CloudTrailLogGroup
          - Encrypt
          - HookUrlForDeployment
          - HookUrlForAlert
          - SlackWorkspaceId
          - SlackChannelIdForDeployment
          - SlackChannelIdForAlert
      - Label: 
          default: 'Notification Configuration'
        Parameters: 
          - SNSForAlertArn
          - SNSForCICDArn
          - SNSForDeploymentArn
      - Label: 
          default: 'Tag Configuration'
        Parameters: 
          - Environment
          - TagKey
          - TagValue

Parameters:
  CloudTrailLogGroup:
    Type: String
    Default: ''
    Description: The log group name for CloudTrail
  Encrypt:
    Type: String
    Default: false
    AllowedValues:
      - true
      - false
    Description: Enable or disable encryption [required]
  HookUrlForDeployment:
    Type: String
    Default: ''
    NoEcho: true
    Description: Slack Hook Url for deployment information without schema string (e.g. hooks.slack.com/services/XXXXX)
  HookUrlForAlert:
    Type: String
    Default: ''
    NoEcho: true
    Description: Slack Hook Url for alert without schema string (e.g. hooks.slack.com/services/XXXXX)
  SlackWorkspaceId:
    Type: String
    Default: ''
    Description: Slack Workspace Name
  SlackChannelIdForDeployment:
    Type: String
    Default: ''
    Description: Slack Channel Id for deployment information
  SlackChannelIdForAlert:
    Type: String
    Default: ''
    Description: Slack Channel Id for alert
  SNSForAlertArn:
    Type: String
    Default: ''
    Description: Amazon SNS Topic ARN for alert
  SNSForCICDArn:
    Type: String
    Default: ''
    Description: Amazon SNS Topic ARN for CICD information
  SNSForDeploymentArn:
    Type: String
    Default: '' 
    Description: Amazon SNS Topic ARN for deployment information
  AutoScalingEventsRule:
    Type: String
    Default: ENABLED
    AllowedValues:
      - ENABLED
      - ERROR_ONLY
      - DISABLED
    Description: Enable or disable the events rule about AutoScaling [required]
  EBSEventsRule:
    Type: String
    Default: ENABLED
    AllowedValues:
      - ENABLED
      - ERROR_ONLY
      - DISABLED
    Description: Enable or disable the events rule about EBS [required]
  EC2EventsRule:
    Type: String
    Default: ENABLED
    AllowedValues:
      - ENABLED
      - DISABLED
    Description: Enable or disable the events rule about EC2 [required]
  KMSEventsRule:
    Type: String
    Default: ENABLED
    AllowedValues:
      - ENABLED
      - DISABLED
    Description: Enable or disable the events rule about KMS [required]
  ManagementConsoleEventsRule:
    Type: String
    Default: ENABLED
    AllowedValues:
      - ENABLED
      - DISABLED
    Description: Enable or disable the events rule about Management Console [required]
  ScheduledEventsRule:
    Type: String
    Default: ENABLED
    AllowedValues:
      - ENABLED
      - DISABLED
    Description: Enable or disable the events rule about Scheduled Events [required]
  TagEventsRule:
    Type: String
    Default: ENABLED
    AllowedValues:
      - ENABLED
      - DISABLED
    Description: Enable or disable the events rule about Tag [required]
  TrustedAdvisorEventsRule:
    Type: String
    Default: ENABLED
    AllowedValues:
      - ENABLED
      - DISABLED
    Description: Enable or disable the events rule about Trusted Advisor [required]
  Environment:
    Type: String
    Default: production
    AllowedValues:
      - production
      - test
      - development
  TagKey:
    Type: String
    Default: createdby
    AllowedPattern: .+
  TagValue:
    Type: String
    Default: aws-cloudformation-templates
    AllowedPattern: .+

Conditions:
  CreateAnalyzeUnauthorizedApiCallsFunction: !Not [ !Equals [ !Ref CloudTrailLogGroup, ''] ]
  CreateKMSKey: !Equals [ !Ref Encrypt, 'true'] 
  CreateSNSForAlert: !Equals [ !Ref SNSForAlertArn, '']
  CreateSNSForCICD: !Equals [ !Ref SNSForCICDArn, '']
  CreateSNSForDeployment: !Equals [ !Ref SNSForDeploymentArn, '']
  CreateChatbotForAlert: !And [ !Not [ !Equals [ !Ref SlackWorkspaceId, ''] ], !Not [ !Equals [ !Ref SNSForAlertArn, ''] ], !Not [ !Equals [ !Ref SlackChannelIdForAlert, ''] ] ]
  CreateChatbotForCICD: !And [ !Not [ !Equals [ !Ref SlackWorkspaceId, ''] ], !Not [ !Equals [ !Ref SNSForCICDArn, ''] ], !Not [ !Equals [ !Ref SlackChannelIdForDeployment, ''] ] ]
  Development: !Equals [ !Ref Environment, development]

Resources:
  # Nested Stack
  CodeGuruCodeProfiler:
    Condition: Development
    Type: AWS::CloudFormation::Stack
    Properties:
      NotificationARNs:
        - !If
          - CreateSNSForDeployment
          - !GetAtt SNSForDeployment.Outputs.SNSTopicArn
          - !Ref SNSForDeploymentArn
      Parameters:
        AgentPermission: !GetAtt IAMRoleForLambda.Arn
        ProfilingGroupName: !Ref AWS::StackName
        SNSForAlertArn: !If
          - CreateSNSForAlert
          - !GetAtt SNSForAlert.Outputs.SNSTopicArn
          - !Ref SNSForAlertArn
        Environment: !Ref Environment
        TagKey: !Ref TagKey
        TagValue: !Ref TagValue 
      Tags:
        - Key: environment
          Value: !Ref Environment
        - Key: !Ref TagKey
          Value: !Ref TagValue
      TemplateURL: https://s3.amazonaws.com/eijikominami-test/aws-cloudformation-templates/cloudops/codeguruprofiler.yaml
  SNSForAlert:
    Condition: CreateSNSForAlert
    Type: AWS::Serverless::Application
    Properties:
      Location:
        ApplicationId: arn:aws:serverlessrepo:us-east-1:172664222583:applications/sns-topic
        SemanticVersion: 2.0.24
      NotificationARNs:
        - !If
          - CreateSNSForDeployment
          - !GetAtt SNSForDeployment.Outputs.SNSTopicArn
          - !Ref SNSForDeploymentArn
      Parameters:
        TopicName: !Sub Alert-createdby-${AWS::StackName}
      Tags:
        environment: !Ref Environment
        createdby: !Ref TagValue
  SNSForFormattedAlert:
    Type: AWS::Serverless::Application
    Properties:
      Location:
        ApplicationId: arn:aws:serverlessrepo:us-east-1:172664222583:applications/sns-topic
        SemanticVersion: 2.0.24
      NotificationARNs:
        - !If
          - CreateSNSForDeployment
          - !GetAtt SNSForDeployment.Outputs.SNSTopicArn
          - !Ref SNSForDeploymentArn
      Parameters:
        TopicName: !Sub FormattedAlert-createdby-${AWS::StackName}
      Tags:
        environment: !Ref Environment
        createdby: !Ref TagValue
  SNSForCICD:
    Condition: CreateSNSForCICD
    Type: AWS::Serverless::Application
    Properties:
      Location:
        ApplicationId: arn:aws:serverlessrepo:us-east-1:172664222583:applications/sns-topic
        SemanticVersion: 2.0.24
      NotificationARNs:
        - !If
          - CreateSNSForDeployment
          - !GetAtt SNSForDeployment.Outputs.SNSTopicArn
          - !Ref SNSForDeploymentArn
      Parameters:
        TopicName: !Sub CICD-createdby-${AWS::StackName}
      Tags:
        environment: !Ref Environment
        createdby: !Ref TagValue
  SNSForDeployment:
    Condition: CreateSNSForDeployment
    Type: AWS::Serverless::Application
    Properties:
      Location:
        ApplicationId: arn:aws:serverlessrepo:us-east-1:172664222583:applications/sns-topic
        SemanticVersion: 2.0.24
      Parameters:
        TopicName: !Sub Deployment-createdby-${AWS::StackName}
      Tags:
        environment: !Ref Environment
        createdby: !Ref TagValue
  EventsRule:
    Type: AWS::Serverless::Application
    Properties:
      Location:
        ApplicationId: arn:aws:serverlessrepo:us-east-1:172664222583:applications/eventbridge-rules
        SemanticVersion: 2.0.24
      NotificationARNs:
        - !If
          - CreateSNSForDeployment
          - !GetAtt SNSForDeployment.Outputs.SNSTopicArn
          - !Ref SNSForDeploymentArn
      Parameters:
        LogicalNamePrefix: !Ref AWS::StackName
        AutoScalingEventsRule: !Ref AutoScalingEventsRule
        EBSEventsRule: !Ref EBSEventsRule
        EC2EventsRule: !Ref EC2EventsRule
        KMSEventsRule: !Ref KMSEventsRule
        ManagementConsoleEventsRule: !Ref ManagementConsoleEventsRule
        ScheduledEventsRule: !Ref ScheduledEventsRule
        SNSForAlertArn: !If
          - CreateSNSForAlert
          - !GetAtt SNSForAlert.Outputs.SNSTopicArn
          - !Ref SNSForAlertArn
        TagEventsRule: !Ref TagEventsRule
        TrustedAdvisorEventsRule: !Ref TrustedAdvisorEventsRule
      Tags:
        environment: !Ref Environment
        createdby: !Ref TagValue
  # IAM
  IAMRoleForLambda:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Description: A role required for Lambda to access X-Ray, KMS and CloudWatch Logs.
      ManagedPolicyArns:
          - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
      Policies:
        - PolicyName: CodeGuru
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - codeguru-profiler:ConfigureAgent
                  - codeguru-profiler:PostAgentProfile
                Resource: '*'
        - PolicyName: CloudWatchLambdaInsightsExecutionRolePolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:log-group:/aws/lambda-insights:*
        - PolicyName: SNS
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - sns:Publish
                Resource: '*'
        - PolicyName: CloudWatchLogs
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                Resource: '*'
              - Effect: Allow
                Action:
                  - logs:PutLogEvents
                Resource: '*' 
        - !If
          - CreateKMSKey
          - PolicyName: CustomPolicy
            PolicyDocument:
              Version: 2012-10-17
              Statement:
                - Effect: Allow
                  Action:
                    - kms:Decrypt
                  Resource: !GetAtt KMSKey.Arn
          - !Ref AWS::NoValue
      RoleName: !Sub ${AWS::StackName}-LambdaForNotification-${AWS::Region}
      Tags:
        - Key: environment
          Value: !Ref Environment
        - Key: !Ref TagKey
          Value: !Ref TagValue
  IAMRoleForChatbot:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: chatbot.amazonaws.com 
            Action: sts:AssumeRole
      Description: A role required for Chatbot to access CloudWatch.
      Policies:
        - PolicyName: CloudWatch
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'cloudwatch:Describe*'
                  - 'cloudwatch:Get*'
                  - 'cloudwatch:List*'
                Resource: '*'
        - PolicyName: CloudWatchLogs
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:Describe*'
                  - 'logs:Get*'
                  - 'logs:List*'
                  - 'logs:StartQuery'
                  - 'logs:StopQuery'
                  - 'logs:TestMetricFilter'
                  - 'logs:FilterLogEvents'
                Resource: '*'
      RoleName: !Sub '${AWS::StackName}-Chatbot-${AWS::Region}'
      Tags:
        - Key: environment
          Value: !Ref Environment
        - Key: !Ref TagKey
          Value: !Ref TagValue
  # KMS
  KMSKey:
    Condition: CreateKMSKey
    Type: AWS::KMS::Key
    Properties: 
      Description: Encrypt Slack Webhook URL
      Enabled: true
      EnableKeyRotation: true
      KeyPolicy: 
        Version: 2012-10-17
        Id: DefaultKeyPolicy
        Statement:
          - Sid: Enable IAM User Permissions
            Effect: Allow
            Principal:
              AWS: !Sub arn:aws:iam::${AWS::AccountId}:root
            Action: 'kms:*'
            Resource: '*'
      KeyUsage: ENCRYPT_DECRYPT
      PendingWindowInDays: 30
      Tags: 
        - Key: environment
          Value: !Ref Environment
        - Key: !Ref TagKey
          Value: !Ref TagValue
  # Lambda
  LambdaSendNotificationToSlack:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: sendNotificationToSlack/
      Description: SNSの内容をSlackに送信します。
      Environment:
        Variables:
          ENCRYPT: !Ref Encrypt
          ALERT_HOOK_URL: !Ref HookUrlForAlert
          DEPLOYMENT_HOOK_URL: !Ref HookUrlForDeployment
          AWS_CODEGURU_PROFILER_GROUP_ARN: !If
            - Development
            - !GetAtt CodeGuruCodeProfiler.Outputs.ProfilerArn
            - !Ref AWS::NoValue
          AWS_CODEGURU_PROFILER_TARGET_REGION: !Ref AWS::Region
      Events:
        SNSForAlert:
          Properties:
            Topic: !If
              - CreateSNSForAlert
              - !GetAtt SNSForAlert.Outputs.SNSTopicArn
              - !Ref SNSForAlertArn
          Type: SNS
        SNSForCICD:
          Properties:
            Topic: !If
              - CreateSNSForCICD
              - !GetAtt SNSForCICD.Outputs.SNSTopicArn
              - !Ref SNSForCICDArn
          Type: SNS
        SNSForDeployment:
          Properties:
            Topic: !If
              - CreateSNSForDeployment
              - !GetAtt SNSForDeployment.Outputs.SNSTopicArn
              - !Ref SNSForDeploymentArn
          Type: SNS
      FunctionName: !Sub sendNotificationToSlack-createdby-${AWS::StackName}
      KmsKeyArn: !If
        - CreateKMSKey
        - !GetAtt KMSKey.Arn
        - !Ref AWS::NoValue
      Layers:
        - !Sub arn:aws:lambda:${AWS::Region}:157417159150:layer:AWSCodeGuruProfilerPythonAgentLambdaLayer:11
      MemorySize: 512
      Role: !GetAtt IAMRoleForLambda.Arn
      Timeout: 30
      Tags:
        environment: !Ref Environment
        createdby: !Ref TagValue
  LogGroupForLambdaSendNotificationToSlack:
    Type: AWS::Logs::LogGroup
    Properties: 
      LogGroupName: !Sub /aws/lambda/${LambdaSendNotificationToSlack}
      RetentionInDays: 60
      Tags: 
        - Key: environment
          Value: !Ref Environment
        - Key: !Ref TagKey
          Value: !Ref TagValue
  SNSSubscriptionForAlertToSlack:
    Type: AWS::SNS::Subscription
    Properties: 
      Endpoint: !GetAtt LambdaSendNotificationToSlack.Arn
      Protocol: lambda
      TopicArn: !If
        - CreateSNSForAlert
        - !GetAtt SNSForAlert.Outputs.SNSTopicArn
        - !Ref SNSForAlertArn
  SNSSubscriptionForCICDToSlack:
    Type: AWS::SNS::Subscription
    Properties: 
      Endpoint: !GetAtt LambdaSendNotificationToSlack.Arn
      Protocol: lambda
      TopicArn: !Ref SNSForCICDArn
  SNSSubscriptionForDeploymentToSlack:
    Type: AWS::SNS::Subscription
    Properties: 
      Endpoint: !GetAtt LambdaSendNotificationToSlack.Arn
      Protocol: lambda
      TopicArn: !If
        - CreateSNSForDeployment
        - !GetAtt SNSForDeployment.Outputs.SNSTopicArn
        - !Ref SNSForDeploymentArn
  # CloudWatch Alarm for Lambda
  AlarmLambdaSendNotificationToSlack:
    Type: AWS::Serverless::Application
    Properties:
      Parameters:
        CustomAlarmName: !Ref AWS::StackName
        SNSTopicArn: !If
          - CreateSNSForAlert
          - !GetAtt SNSForAlert.Outputs.SNSTopicArn
          - !Ref SNSForAlertArn
        MetricFilterPattern: ''
        FunctionResouceName: !Ref LambdaSendNotificationToSlack
      NotificationARNs: 
        - !If
          - CreateSNSForDeployment
          - !GetAtt SNSForDeployment.Outputs.SNSTopicArn
          - !Ref SNSForDeploymentArn
      Location:
        ApplicationId: arn:aws:serverlessrepo:us-east-1:172664222583:applications/cloudwatch-alarm-about-lambda
        SemanticVersion: 2.0.24
      Tags:
        environment: !Ref Environment
        createdby: !Ref TagValue
  # Lambda
  LambdaTransferNotificationToSNS:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: transferNotificationToSNS/
      Description: SNSの内容を別のSNSに転送します。
      Environment:
        Variables:
          SNS_TOPIC_ARN: !GetAtt SNSForFormattedAlert.Outputs.SNSTopicArn
          AWS_CODEGURU_PROFILER_GROUP_ARN: !If
            - Development
            - !GetAtt CodeGuruCodeProfiler.Outputs.ProfilerArn
            - !Ref AWS::NoValue
          AWS_CODEGURU_PROFILER_TARGET_REGION: !Ref AWS::Region
      Events:
        SNSForAlert:
          Properties:
            Topic: !If
              - CreateSNSForAlert
              - !GetAtt SNSForAlert.Outputs.SNSTopicArn
              - !Ref SNSForAlertArn
          Type: SNS
      FunctionName: !Sub transferNotificationToSNS-createdby-${AWS::StackName}
      Layers:
        - !Sub arn:aws:lambda:${AWS::Region}:157417159150:layer:AWSCodeGuruProfilerPythonAgentLambdaLayer:11
      MemorySize: 512
      Role: !GetAtt IAMRoleForLambda.Arn
      Timeout: 30
      Tags:
        environment: !Ref Environment
        createdby: !Ref TagValue
  LogGroupForLambdaTransferNotificationToSNS:
    Type: AWS::Logs::LogGroup
    Properties: 
      LogGroupName: !Sub /aws/lambda/${LambdaTransferNotificationToSNS}
      RetentionInDays: 60
      Tags: 
        - Key: environment
          Value: !Ref Environment
        - Key: !Ref TagKey
          Value: !Ref TagValue
  SNSSubscriptionForAlertToSNS:
    Type: AWS::SNS::Subscription
    Properties: 
      Endpoint: !GetAtt LambdaTransferNotificationToSNS.Arn
      Protocol: lambda
      TopicArn: !If
        - CreateSNSForAlert
        - !GetAtt SNSForAlert.Outputs.SNSTopicArn
        - !Ref SNSForAlertArn
  # CloudWatch Alarm for Lambda
  AlarmLambdaTransferNotificationToSNS:
    Type: AWS::Serverless::Application
    Properties:
      Parameters:
        CustomAlarmName: !Ref AWS::StackName
        SNSTopicArn: !If
          - CreateSNSForAlert
          - !GetAtt SNSForAlert.Outputs.SNSTopicArn
          - !Ref SNSForAlertArn
        MetricFilterPattern: ''
        FunctionResouceName: !Ref LambdaTransferNotificationToSNS
      NotificationARNs: 
        - !If
          - CreateSNSForDeployment
          - !GetAtt SNSForDeployment.Outputs.SNSTopicArn
          - !Ref SNSForDeploymentArn
      Location:
        ApplicationId: arn:aws:serverlessrepo:us-east-1:172664222583:applications/cloudwatch-alarm-about-lambda
        SemanticVersion: 2.0.24
      Tags:
        environment: !Ref Environment
        createdby: !Ref TagValue
  # Lambda
  LambdaAnalyzeUnauthorizedApiCalls:
    Condition: CreateAnalyzeUnauthorizedApiCallsFunction
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: analyzeUnauthorizedApiCalls/
      Description: Unauthorized API Calls イベントの詳細をSlackに送信します。
      Environment:
        Variables:
          ENCRYPT: !Ref Encrypt
          ALERT_HOOK_URL: !Ref HookUrlForAlert
          DEPLOYMENT_HOOK_URL: !Ref HookUrlForDeployment
          AWS_LAMBDA_EXEC_WRAPPER: /opt/codeguru_profiler_lambda_exec
          AWS_CODEGURU_PROFILER_GROUP_ARN: !If
            - Development
            - !GetAtt CodeGuruCodeProfiler.Outputs.ProfilerArn
            - !Ref AWS::NoValue
          AWS_CODEGURU_PROFILER_TARGET_REGION: !Ref AWS::Region
      Events:
        CloudWatchLogs:
          Properties:
            FilterPattern: '{($.errorCode="*UnauthorizedOperation") || ($.errorCode="AccessDenied*")}'
            LogGroupName: !Ref CloudTrailLogGroup
          Type: CloudWatchLogs
      FunctionName: !Sub analyzeUnauthorizedApiCalls-createdby-${AWS::StackName}
      KmsKeyArn: !If
        - CreateKMSKey
        - !GetAtt KMSKey.Arn
        - !Ref AWS::NoValue
      Layers:
        - !Sub arn:aws:lambda:${AWS::Region}:157417159150:layer:AWSCodeGuruProfilerPythonAgentLambdaLayer:11
      MemorySize: 512
      Role: !GetAtt IAMRoleForLambda.Arn
      Timeout: 30
      Tags:
        environment: !Ref Environment
        createdby: !Ref TagValue
  LambdaAnalyzeUnauthorizedApiCallsPermission:
    Condition: CreateAnalyzeUnauthorizedApiCallsFunction
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref LambdaAnalyzeUnauthorizedApiCalls
      Principal: logs.amazonaws.com
      SourceArn: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${CloudTrailLogGroup}:*
  LogGroupForLambdaAnalyzeUnauthorizedApiCalls:
    Condition: CreateAnalyzeUnauthorizedApiCallsFunction
    Type: AWS::Logs::LogGroup
    Properties: 
      LogGroupName: !Sub /aws/lambda/${LambdaAnalyzeUnauthorizedApiCalls}
      RetentionInDays: 60
      Tags: 
        - Key: environment
          Value: !Ref Environment
        - Key: !Ref TagKey
          Value: !Ref TagValue
  # CloudWatch Alarm for Lambda
  AlarmLambdaAnalyzeUnauthorizedApiCalls:
    Condition: CreateAnalyzeUnauthorizedApiCallsFunction
    Type: AWS::Serverless::Application
    Properties:
      Parameters:
        CustomAlarmName: !Ref AWS::StackName
        SNSTopicArn: !If
          - CreateSNSForAlert
          - !GetAtt SNSForAlert.Outputs.SNSTopicArn
          - !Ref SNSForAlertArn
        MetricFilterPattern: ''
        FunctionResouceName: !Ref LambdaAnalyzeUnauthorizedApiCalls
      NotificationARNs: 
        - !If
          - CreateSNSForDeployment
          - !GetAtt SNSForDeployment.Outputs.SNSTopicArn
          - !Ref SNSForDeploymentArn
      Location:
        ApplicationId: arn:aws:serverlessrepo:us-east-1:172664222583:applications/cloudwatch-alarm-about-lambda
        SemanticVersion: 2.0.24
      Tags:
        environment: !Ref Environment
        createdby: !Ref TagValue
  # Chatbot
  ChatbotForAlert:
    Condition: CreateChatbotForAlert
    Type: AWS::Serverless::Application
    Properties:
      Location: https://s3.amazonaws.com/eijikominami/aws-cloudformation-templates/notification/chatbot.yaml
      NotificationARNs:
        - !If
          - CreateSNSForDeployment
          - !GetAtt SNSForDeployment.Outputs.SNSTopicArn
          - !Ref SNSForDeploymentArn
      Parameters:
        IAMRoleForChatbotArn: !GetAtt IAMRoleForChatbot.Arn
        LogicalNamePrefix: Alert
        SlackWorkspaceId: !Ref SlackWorkspaceId
        SlackChannelId: !Ref SlackChannelIdForAlert
        SNSArn: !GetAtt SNSForFormattedAlert.Outputs.SNSTopicArn
      Tags:
        environment: !Ref Environment
        createdby: !Ref TagValue
  ChatbotForCICD:
    Condition: CreateChatbotForCICD
    Type: AWS::Serverless::Application
    Properties:
      Location: https://s3.amazonaws.com/eijikominami/aws-cloudformation-templates/notification/chatbot.yaml
      NotificationARNs:
        - !If
          - CreateSNSForDeployment
          - !GetAtt SNSForDeployment.Outputs.SNSTopicArn
          - !Ref SNSForDeploymentArn
      Parameters:
        IAMRoleForChatbotArn: !GetAtt IAMRoleForChatbot.Arn
        LogicalNamePrefix: CICD
        SlackWorkspaceId: !Ref SlackWorkspaceId
        SlackChannelId: !Ref SlackChannelIdForDeployment
        SNSArn: !If
          - CreateSNSForCICD
          - !GetAtt SNSForCICD.Outputs.SNSTopicArn
          - !Ref SNSForCICDArn
      Tags:
        environment: !Ref Environment
        createdby: !Ref TagValue
  # CloudWatch Dashboard
  Dashboard:
    Type: AWS::CloudWatch::Dashboard
    Properties:
      DashboardName: !Sub ${AWS::StackName}-${AWS::Region}
      DashboardBody: !Sub '{"widgets": [{"type": "text","x": 0,"y": 0,"width": 24,"height": 2,"properties": {"markdown": "\n# Lambda ${LambdaSendNotificationToSlack}()\n\nCloudWatch アラームの内容をSlackに送信します。\n"}},{"type": "metric","x": 12,"y": 2,"width": 12,"height": 9,"properties": {"metrics": [[ "AWS/Lambda", "Errors", "FunctionName", "${LambdaSendNotificationToSlack}", "Resource", "${LambdaSendNotificationToSlack}", { "color": "#d62728" } ],[ ".", "Throttles", ".", ".", ".", "." ],[ ".", "ConcurrentExecutions", ".", ".", ".", "." ],[ ".", "Invocations", ".", ".", ".", ".", { "color": "#1f77b4" } ]],"view": "timeSeries","stacked": false,"region": "${AWS::Region}","stat": "Sum","period": 60,"title": "Count"}},{"type": "metric","x": 0,"y": 5,"width": 6,"height": 3,"properties": {"title": "ClientError","annotations": {"alarms": ["arn:aws:cloudwatch:${AWS::Region}:${AWS::AccountId}:alarm:Warning-${AWS::StackName}-Lambda-${LambdaSendNotificationToSlack}-ClientError"]},"view": "timeSeries","stacked": false}},{"type": "metric","x": 0,"y": 8,"width": 6,"height": 3,"properties": {"title": "TypeError","annotations": {"alarms": ["arn:aws:cloudwatch:${AWS::Region}:${AWS::AccountId}:alarm:Warning-${AWS::StackName}-Lambda-${LambdaSendNotificationToSlack}-TypeError"]},"view": "timeSeries","stacked": false}},{"type": "metric","x": 6,"y": 5,"width": 6,"height": 3,"properties": {"title": "Throttles","annotations": {"alarms": ["arn:aws:cloudwatch:${AWS::Region}:${AWS::AccountId}:alarm:Warning-${AWS::StackName}-Lambda-${LambdaSendNotificationToSlack}-Throttles"]},"view": "timeSeries","stacked": false}},{"type": "metric","x": 0,"y": 2,"width": 12,"height": 3,"properties": {"title": "Duration","annotations": {"alarms": ["arn:aws:cloudwatch:${AWS::Region}:${AWS::AccountId}:alarm:Warning-${AWS::StackName}-Lambda-${LambdaSendNotificationToSlack}-Timeout-Will-Occur"]},"view": "timeSeries","stacked": false}},{"type": "metric","x": 6,"y": 8,"width": 6,"height": 3,"properties": {"title": "Errors","annotations": {"alarms": ["arn:aws:cloudwatch:${AWS::Region}:${AWS::AccountId}:alarm:Warning-${AWS::StackName}-Lambda-${LambdaSendNotificationToSlack}-Errors"]},"view": "timeSeries","stacked": false}},{"type": "log","x": 0,"y": 11,"width": 12,"height": 3,"properties": {"query": "SOURCE ''/aws/lambda/${LambdaSendNotificationToSlack}'' | fields @message, @timestamp | filter @message like /(?i)ERROR/ | sort @timestamp desc | limit 20","region": "${AWS::Region}","stacked": false,"view": "table","title": "Error"}},{"type": "log","x": 12,"y": 11,"width": 12,"height": 3,"properties": {"query": "SOURCE ''/aws/lambda/${LambdaSendNotificationToSlack}'' | fields records, @timestamp | filter records>0 | sort @timestamp desc | limit 60","region": "${AWS::Region}","stacked": false,"title": "Records","view": "table"}}]}'

Outputs:
  LambdaSendNotificationToSlackARN:
    Description: Lambda ARN of sendNotificationToSlack()
    Value: !GetAtt LambdaSendNotificationToSlack.Arn
  ChatbotForChatbotForCICD:
    Condition: CreateChatbotForCICD
    Description: Chatbot ARN for CI/CD
    Value: 'CICD'
  ChatbotForAlert:
    Condition: CreateChatbotForAlert
    Description: Chatbot ARN
    Value: !GetAtt ChatbotForAlert.Outputs.ChatbotArn
  SNSForFormattedAlert:
    Description: SNS for Formatted Alert Arn
    Value: !GetAtt SNSForFormattedAlert.Outputs.SNSTopicArn
    